[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.9","content-config-digest","31c2797ea3e17b86","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://khoivan.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,56,57,120,121,210,211,256,257,268,269,279,280,297,298,309,310],"clean-architecture-android",{"id":11,"data":13,"body":29,"filePath":30,"digest":31,"rendered":32},{"title":14,"description":15,"pubDate":16,"author":17,"category":18,"tags":19,"draft":25,"featured":26,"language":27,"readingTime":28,"categorySlug":18},"Clean Architecture trong Android - H∆∞·ªõng d·∫´n t·ª´ A-Z","T√¨m hi·ªÉu c√°ch apply Clean Architecture v√†o d·ª± √°n Android th·ª±c t·∫ø v·ªõi Kotlin, MVVM v√† Jetpack Compose",["Date","2024-01-10T00:00:00.000Z"],"Khoi Van","engineering",[20,21,22,23,24],"android","clean-architecture","kotlin","mvvm","jetpack-compose",false,true,"vi","15 min read","## Gi·ªõi thi·ªáu\n\nClean Architecture l√† m·ªôt pattern ƒë∆∞·ª£c Uncle Bob (Robert C. Martin) gi·ªõi thi·ªáu,\ngi√∫p t·∫°o ra code base d·ªÖ maintain, test v√† scale. Trong b√†i vi·∫øt n√†y, t√¥i s·∫Ω\nchia s·∫ª c√°ch apply Clean Architecture v√†o d·ª± √°n Android.\n\n## T·∫°i sao c·∫ßn Clean Architecture?\n\nSau 8 nƒÉm l√†m Android, t√¥i nh·∫≠n th·∫•y nhi·ªÅu d·ª± √°n g·∫∑p v·∫•n ƒë·ªÅ:\n\n- Code kh√≥ maintain khi app l·ªõn d·∫ßn\n- Kh√≥ vi·∫øt unit test\n- Business logic b·ªã tr·ªôn l·∫´n v·ªõi UI\n- Kh√≥ thay ƒë·ªïi ho·∫∑c th√™m features m·ªõi\n\nClean Architecture gi·∫£i quy·∫øt t·∫•t c·∫£ v·∫•n ƒë·ªÅ tr√™n!\n\n## C√°c t·∫ßng trong Clean Architecture\n\n### 1. Domain Layer (Core Business)\n\n```kotlin\n// UseCase example\nclass GetUserUseCase(\n    private val userRepository: UserRepository\n) {\n    suspend operator fun invoke(userId: String): User {\n        return userRepository.getUser(userId)\n    }\n}\n```","src/content/blog/clean-architecture-android.md","dc47a31ac2c61f05",{"html":33,"metadata":34},"\u003Ch2 id=\"gi·ªõi-thi·ªáu\">Gi·ªõi thi·ªáu\u003C/h2>\n\u003Cp>Clean Architecture l√† m·ªôt pattern ƒë∆∞·ª£c Uncle Bob (Robert C. Martin) gi·ªõi thi·ªáu,\ngi√∫p t·∫°o ra code base d·ªÖ maintain, test v√† scale. Trong b√†i vi·∫øt n√†y, t√¥i s·∫Ω\nchia s·∫ª c√°ch apply Clean Architecture v√†o d·ª± √°n Android.\u003C/p>\n\u003Ch2 id=\"t·∫°i-sao-c·∫ßn-clean-architecture\">T·∫°i sao c·∫ßn Clean Architecture?\u003C/h2>\n\u003Cp>Sau 8 nƒÉm l√†m Android, t√¥i nh·∫≠n th·∫•y nhi·ªÅu d·ª± √°n g·∫∑p v·∫•n ƒë·ªÅ:\u003C/p>\n\u003Cul>\n\u003Cli>Code kh√≥ maintain khi app l·ªõn d·∫ßn\u003C/li>\n\u003Cli>Kh√≥ vi·∫øt unit test\u003C/li>\n\u003Cli>Business logic b·ªã tr·ªôn l·∫´n v·ªõi UI\u003C/li>\n\u003Cli>Kh√≥ thay ƒë·ªïi ho·∫∑c th√™m features m·ªõi\u003C/li>\n\u003C/ul>\n\u003Cp>Clean Architecture gi·∫£i quy·∫øt t·∫•t c·∫£ v·∫•n ƒë·ªÅ tr√™n!\u003C/p>\n\u003Ch2 id=\"c√°c-t·∫ßng-trong-clean-architecture\">C√°c t·∫ßng trong Clean Architecture\u003C/h2>\n\u003Ch3 id=\"1-domain-layer-core-business\">1. Domain Layer (Core Business)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// UseCase example\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> GetUserUseCase\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#F97583\"> val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> userRepository: \u003C/span>\u003Cspan style=\"color:#B392F0\">UserRepository\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    suspend\u003C/span>\u003Cspan style=\"color:#F97583\"> operator\u003C/span>\u003Cspan style=\"color:#F97583\"> fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> invoke\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId: \u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): \u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> userRepository.\u003C/span>\u003Cspan style=\"color:#B392F0\">getUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":35,"localImagePaths":50,"remoteImagePaths":51,"frontmatter":52,"imagePaths":55},[36,40,43,46],{"depth":37,"slug":38,"text":39},2,"gi·ªõi-thi·ªáu","Gi·ªõi thi·ªáu",{"depth":37,"slug":41,"text":42},"t·∫°i-sao-c·∫ßn-clean-architecture","T·∫°i sao c·∫ßn Clean Architecture?",{"depth":37,"slug":44,"text":45},"c√°c-t·∫ßng-trong-clean-architecture","C√°c t·∫ßng trong Clean Architecture",{"depth":47,"slug":48,"text":49},3,"1-domain-layer-core-business","1. Domain Layer (Core Business)",[],[],{"title":14,"description":15,"pubDate":53,"author":17,"category":18,"tags":54,"featured":26,"language":27,"readingTime":28},["Date","2024-01-10T00:00:00.000Z"],[20,21,22,23,24],[],"from-samsung-to-pixel",{"id":56,"data":58,"body":68,"filePath":69,"digest":70,"rendered":71},{"title":59,"description":60,"pubDate":61,"author":17,"category":62,"tags":63,"mood":66,"draft":25,"featured":25,"language":27,"readingTime":67,"categorySlug":62},"From Samsung to Pixel: T·∫°i sao dev Android l·∫°i d√πng iPhone?","C√¢u chuy·ªán v·ªÅ paradox c·ªßa m·ªôt Android developer v√† chi·∫øc iPhone trong t√∫i",["Date","2024-01-27T17:00:00.000Z"],"life",[20,62,64,65],"opinion","devices","humorous","5 min read","## The Confession\n\nOkay, I'll admit it. T√¥i l√† Android developer v·ªõi 8 nƒÉm kinh nghi·ªám, v√† t√¥i ƒëang g√µ b√†i n√†y tr√™n... iPhone.\n\n*Waits for the gasps to die down*\n\nNh∆∞ng khoan, h√£y ƒë·ªÉ t√¥i gi·∫£i th√≠ch! üòÖ\n\n## The Journey\n\n### 2016 - Samsung Galaxy S7 Edge\nNh·ªØng ng√†y ƒë·∫ßu l√†m Android dev. Edge screen l√† revolutionary. T√¥i customize m·ªçi th·ª©: launcher, icon pack, widgets. Phone c·ªßa t√¥i nh∆∞ m·ªôt t√°c ph·∫©m ngh·ªá thu·∫≠t.\n\n```kotlin\n// My first \"Hello World\" was written and tested on this phone\nToast.makeText(context, \"Hello from S7 Edge!\", Toast.LENGTH_SHORT).show()\n```\n\n### 2018 - OnePlus 6\nSpeed. Pure speed. OxygenOS clean nh∆∞ Vanilla Android. Perfect cho development.\n\n### 2020 - Pixel 4a\nFinally! Pure Android experience. First to get updates. Camera tuy·ªát v·ªùi cho... ch·ª•p bug screenshots. üì∏\n\n### 2022 - iPhone 13 Pro\nPlot twist! \n\n## T·∫°i sao l·∫°i iPhone?\n\nM·ªôt bu·ªïi t·ªëi, sau khi fix xong bug th·ª© n c·ªßa app, t√¥i nh·∫≠n ra:\n\n**Sau 8 ti·∫øng code Android, ƒëi·ªÅu cu·ªëi c√πng t√¥i mu·ªën l√† troubleshoot phone c·ªßa m√¨nh.**\n\n- Mu·ªën banking app just works\n- Mu·ªën camera ch·ª•p xong l√† ƒë·∫πp, kh√¥ng c·∫ßn edit\n- Mu·ªën battery t·∫≠n 2 ng√†y kh√¥ng s·∫°c\n- Mu·ªën m·ªçi th·ª©... boring v√† reliable\n\n## The Daily Paradox\n\nS√°ng: Debug Android app tr√™n 5 test devices\nTr∆∞a: \"iOS has better UX\" - t√¥i n√≥i trong meeting\nChi·ªÅu: Implement Material Design 3\nT·ªëi: FaceTime v·ªõi b·∫°n b√® tr√™n iPhone\n\n## What I Miss About Android\n\n1. **Back button** - Swipe gesture kh√¥ng bao gi·ªù b·∫±ng ƒë∆∞·ª£c\n2. **File system** - iOS Files app l√† m·ªôt joke\n3. **Default apps** - Mu·ªën d√πng Firefox? Good luck!\n4. **Customization** - Home screen iOS nh∆∞ nh√† t√π\n5. **USB-C** - Oh wait, iPhone 15 c√≥ r·ªìi üòÑ\n\n## What I Don't Miss\n\n1. **\"WhatsApp has stopped\"** notifications\n2. **Random battery drain** t·ª´ rogue apps\n3. **Which launcher should I use today?** paralysis\n4. **Fragmentation hell** khi test app\n5. **My mom asking** \"Con ∆°i, phone m·∫π lag qu√°\"\n\n## The Truth\n\nAndroid developer d√πng iPhone kh√¥ng ph·∫£i betrayal. It's **separation of concerns**.\n\n```kotlin\nclass KhoiVan : Developer {\n    val workPhone = Pixel(8, \"For testing\")\n    val personalPhone = iPhone(13, \"For living\")\n    \n    override fun isHypocrite(): Boolean {\n        return false // It's called work-life balance üòé\n    }\n}\n```\n\n## The Real Real Truth\n\nCu·ªëi c√πng th√¨, phone ch·ªâ l√† tool. Android hay iOS, quan tr·ªçng l√†:\n- Code b·∫°n vi·∫øt c√≥ clean kh√¥ng?\n- App b·∫°n l√†m c√≥ solve real problems kh√¥ng?\n- User c√≥ happy kh√¥ng?\n\nV√† honestly? Khi b·∫°n ƒë√£ l√†m vi·ªác v·ªõi c·∫£ hai platforms ƒë·ªß l√¢u, b·∫°n s·∫Ω nh·∫≠n ra ch√∫ng ƒëang ng√†y c√†ng gi·ªëng nhau. iOS copy Android features, Android copy iOS features. \n\nCircle of life. üîÑ\n\n## P/S\n\nTeam Android ·ªü c√¥ng ty v·∫´n ch∆∞a tha th·ª© cho t√¥i. M·ªói l·∫ßn iPhone rung trong meeting, t√¥i ph·∫£i gi·∫£i th√≠ch \"It's for competitive analysis!\" \n\nSure, Khoi. Sure. üòè\n\n---\n\n*Currently using: iPhone 13 Pro (personal), Pixel 8 (work), iPad (Netflix), MacBook (everything else), v√† Samsung Galaxy Watch (because why not make it more complicated?)*","src/content/blog/from-samsung-to-pixel.md","14c5ced9b31e5d75",{"html":72,"metadata":73},"\u003Ch2 id=\"the-confession\">The Confession\u003C/h2>\n\u003Cp>Okay, I‚Äôll admit it. T√¥i l√† Android developer v·ªõi 8 nƒÉm kinh nghi·ªám, v√† t√¥i ƒëang g√µ b√†i n√†y tr√™n‚Ä¶ iPhone.\u003C/p>\n\u003Cp>\u003Cem>Waits for the gasps to die down\u003C/em>\u003C/p>\n\u003Cp>Nh∆∞ng khoan, h√£y ƒë·ªÉ t√¥i gi·∫£i th√≠ch! üòÖ\u003C/p>\n\u003Ch2 id=\"the-journey\">The Journey\u003C/h2>\n\u003Ch3 id=\"2016---samsung-galaxy-s7-edge\">2016 - Samsung Galaxy S7 Edge\u003C/h3>\n\u003Cp>Nh·ªØng ng√†y ƒë·∫ßu l√†m Android dev. Edge screen l√† revolutionary. T√¥i customize m·ªçi th·ª©: launcher, icon pack, widgets. Phone c·ªßa t√¥i nh∆∞ m·ªôt t√°c ph·∫©m ngh·ªá thu·∫≠t.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// My first \"Hello World\" was written and tested on this phone\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Toast.\u003C/span>\u003Cspan style=\"color:#B392F0\">makeText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(context, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Hello from S7 Edge!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, Toast.LENGTH_SHORT).\u003C/span>\u003Cspan style=\"color:#B392F0\">show\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2018---oneplus-6\">2018 - OnePlus 6\u003C/h3>\n\u003Cp>Speed. Pure speed. OxygenOS clean nh∆∞ Vanilla Android. Perfect cho development.\u003C/p>\n\u003Ch3 id=\"2020---pixel-4a\">2020 - Pixel 4a\u003C/h3>\n\u003Cp>Finally! Pure Android experience. First to get updates. Camera tuy·ªát v·ªùi cho‚Ä¶ ch·ª•p bug screenshots. üì∏\u003C/p>\n\u003Ch3 id=\"2022---iphone-13-pro\">2022 - iPhone 13 Pro\u003C/h3>\n\u003Cp>Plot twist!\u003C/p>\n\u003Ch2 id=\"t·∫°i-sao-l·∫°i-iphone\">T·∫°i sao l·∫°i iPhone?\u003C/h2>\n\u003Cp>M·ªôt bu·ªïi t·ªëi, sau khi fix xong bug th·ª© n c·ªßa app, t√¥i nh·∫≠n ra:\u003C/p>\n\u003Cp>\u003Cstrong>Sau 8 ti·∫øng code Android, ƒëi·ªÅu cu·ªëi c√πng t√¥i mu·ªën l√† troubleshoot phone c·ªßa m√¨nh.\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Mu·ªën banking app just works\u003C/li>\n\u003Cli>Mu·ªën camera ch·ª•p xong l√† ƒë·∫πp, kh√¥ng c·∫ßn edit\u003C/li>\n\u003Cli>Mu·ªën battery t·∫≠n 2 ng√†y kh√¥ng s·∫°c\u003C/li>\n\u003Cli>Mu·ªën m·ªçi th·ª©‚Ä¶ boring v√† reliable\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-daily-paradox\">The Daily Paradox\u003C/h2>\n\u003Cp>S√°ng: Debug Android app tr√™n 5 test devices\nTr∆∞a: ‚ÄúiOS has better UX‚Äù - t√¥i n√≥i trong meeting\nChi·ªÅu: Implement Material Design 3\nT·ªëi: FaceTime v·ªõi b·∫°n b√® tr√™n iPhone\u003C/p>\n\u003Ch2 id=\"what-i-miss-about-android\">What I Miss About Android\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Back button\u003C/strong> - Swipe gesture kh√¥ng bao gi·ªù b·∫±ng ƒë∆∞·ª£c\u003C/li>\n\u003Cli>\u003Cstrong>File system\u003C/strong> - iOS Files app l√† m·ªôt joke\u003C/li>\n\u003Cli>\u003Cstrong>Default apps\u003C/strong> - Mu·ªën d√πng Firefox? Good luck!\u003C/li>\n\u003Cli>\u003Cstrong>Customization\u003C/strong> - Home screen iOS nh∆∞ nh√† t√π\u003C/li>\n\u003Cli>\u003Cstrong>USB-C\u003C/strong> - Oh wait, iPhone 15 c√≥ r·ªìi üòÑ\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"what-i-dont-miss\">What I Don‚Äôt Miss\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>‚ÄúWhatsApp has stopped‚Äù\u003C/strong> notifications\u003C/li>\n\u003Cli>\u003Cstrong>Random battery drain\u003C/strong> t·ª´ rogue apps\u003C/li>\n\u003Cli>\u003Cstrong>Which launcher should I use today?\u003C/strong> paralysis\u003C/li>\n\u003Cli>\u003Cstrong>Fragmentation hell\u003C/strong> khi test app\u003C/li>\n\u003Cli>\u003Cstrong>My mom asking\u003C/strong> ‚ÄúCon ∆°i, phone m·∫π lag qu√°‚Äù\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-truth\">The Truth\u003C/h2>\n\u003Cp>Android developer d√πng iPhone kh√¥ng ph·∫£i betrayal. It‚Äôs \u003Cstrong>separation of concerns\u003C/strong>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> KhoiVan\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> : \u003C/span>\u003Cspan style=\"color:#B392F0\">Developer\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> workPhone \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Pixel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"For testing\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> personalPhone \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> iPhone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"For living\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    override\u003C/span>\u003Cspan style=\"color:#F97583\"> fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> isHypocrite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(): \u003C/span>\u003Cspan style=\"color:#B392F0\">Boolean\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#6A737D\"> // It's called work-life balance üòé\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"the-real-real-truth\">The Real Real Truth\u003C/h2>\n\u003Cp>Cu·ªëi c√πng th√¨, phone ch·ªâ l√† tool. Android hay iOS, quan tr·ªçng l√†:\u003C/p>\n\u003Cul>\n\u003Cli>Code b·∫°n vi·∫øt c√≥ clean kh√¥ng?\u003C/li>\n\u003Cli>App b·∫°n l√†m c√≥ solve real problems kh√¥ng?\u003C/li>\n\u003Cli>User c√≥ happy kh√¥ng?\u003C/li>\n\u003C/ul>\n\u003Cp>V√† honestly? Khi b·∫°n ƒë√£ l√†m vi·ªác v·ªõi c·∫£ hai platforms ƒë·ªß l√¢u, b·∫°n s·∫Ω nh·∫≠n ra ch√∫ng ƒëang ng√†y c√†ng gi·ªëng nhau. iOS copy Android features, Android copy iOS features.\u003C/p>\n\u003Cp>Circle of life. üîÑ\u003C/p>\n\u003Ch2 id=\"ps\">P/S\u003C/h2>\n\u003Cp>Team Android ·ªü c√¥ng ty v·∫´n ch∆∞a tha th·ª© cho t√¥i. M·ªói l·∫ßn iPhone rung trong meeting, t√¥i ph·∫£i gi·∫£i th√≠ch ‚ÄúIt‚Äôs for competitive analysis!‚Äù\u003C/p>\n\u003Cp>Sure, Khoi. Sure. üòè\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cem>Currently using: iPhone 13 Pro (personal), Pixel 8 (work), iPad (Netflix), MacBook (everything else), v√† Samsung Galaxy Watch (because why not make it more complicated?)\u003C/em>\u003C/p>",{"headings":74,"localImagePaths":114,"remoteImagePaths":115,"frontmatter":116,"imagePaths":119},[75,78,81,84,87,90,93,96,99,102,105,108,111],{"depth":37,"slug":76,"text":77},"the-confession","The Confession",{"depth":37,"slug":79,"text":80},"the-journey","The Journey",{"depth":47,"slug":82,"text":83},"2016---samsung-galaxy-s7-edge","2016 - Samsung Galaxy S7 Edge",{"depth":47,"slug":85,"text":86},"2018---oneplus-6","2018 - OnePlus 6",{"depth":47,"slug":88,"text":89},"2020---pixel-4a","2020 - Pixel 4a",{"depth":47,"slug":91,"text":92},"2022---iphone-13-pro","2022 - iPhone 13 Pro",{"depth":37,"slug":94,"text":95},"t·∫°i-sao-l·∫°i-iphone","T·∫°i sao l·∫°i iPhone?",{"depth":37,"slug":97,"text":98},"the-daily-paradox","The Daily Paradox",{"depth":37,"slug":100,"text":101},"what-i-miss-about-android","What I Miss About Android",{"depth":37,"slug":103,"text":104},"what-i-dont-miss","What I Don‚Äôt Miss",{"depth":37,"slug":106,"text":107},"the-truth","The Truth",{"depth":37,"slug":109,"text":110},"the-real-real-truth","The Real Real Truth",{"depth":37,"slug":112,"text":113},"ps","P/S",[],[],{"title":59,"description":60,"pubDate":117,"author":17,"category":62,"tags":118,"language":27,"mood":66},"Jan 28 2024",[20,62,64,65],[],"jetpack-compose-best-practices",{"id":120,"data":122,"body":130,"filePath":131,"digest":132,"rendered":133},{"title":123,"description":124,"pubDate":125,"author":17,"category":18,"tags":126,"draft":25,"featured":25,"language":27,"readingTime":129,"categorySlug":18},"Jetpack Compose Best Practices - T·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao","T·ªïng h·ª£p c√°c best practices khi l√†m vi·ªác v·ªõi Jetpack Compose, t·ª´ performance optimization ƒë·∫øn state management",["Date","2024-01-15T00:00:00.000Z"],[24,20,22,127,128],"ui","performance","12 min read","## Gi·ªõi thi·ªáu\n\nJetpack Compose ƒë√£ thay ƒë·ªïi ho√†n to√†n c√°ch ch√∫ng ta x√¢y d·ª±ng UI trong Android. Sau 2 nƒÉm l√†m vi·ªác v·ªõi Compose trong production, t√¥i mu·ªën chia s·∫ª nh·ªØng best practices gi√∫p code c·ªßa b·∫°n clean, performant v√† maintainable.\n\n## 1. State Management\n\n### Remember vs RememberSaveable\n\n```kotlin\n@Composable\nfun CounterScreen() {\n    // S·∫Ω b·ªã reset khi configuration change\n    var count by remember { mutableStateOf(0) }\n\n    // ƒê∆∞·ª£c preserve qua configuration changes\n    var savedCount by rememberSaveable { mutableStateOf(0) }\n}\n```\n\n### State Hoisting\n\nLu√¥n hoist state l√™n component cha khi c·∫ßn share gi·ªØa nhi·ªÅu composables:\n\n```kotlin\n@Composable\nfun TodoScreen() {\n    var todos by remember { mutableStateOf(listOf\u003CTodo>()) }\n\n    TodoList(\n        todos = todos,\n        onTodoClick = { todo ->\n            // Handle click\n        }\n    )\n}\n\n@Composable\nfun TodoList(\n    todos: List\u003CTodo>,\n    onTodoClick: (Todo) -> Unit\n) {\n    // Stateless composable\n}\n```\n\n## 2. Performance Optimization\n\n### Stable Types\n\nƒê√°nh d·∫•u data classes v·ªõi `@Stable` ho·∫∑c `@Immutable`:\n\n```kotlin\n@Stable\ndata class User(\n    val id: String,\n    val name: String,\n    val avatar: String\n)\n```\n\n### Remember Lambda\n\nTr√°nh t·∫°o lambda m·ªõi trong m·ªói recomposition:\n\n```kotlin\n@Composable\nfun UserItem(user: User, onClick: () -> Unit) {\n    // ‚ùå Bad - t·∫°o lambda m·ªõi m·ªói l·∫ßn\n    Button(onClick = { onClick() }) {\n        Text(user.name)\n    }\n\n    // ‚úÖ Good - pass tr·ª±c ti·∫øp\n    Button(onClick = onClick) {\n        Text(user.name)\n    }\n}\n```\n\n### LazyColumn Keys\n\nLu√¥n provide stable keys cho LazyColumn items:\n\n```kotlin\nLazyColumn {\n    items(\n        items = users,\n        key = { user -> user.id } // Stable key\n    ) { user ->\n        UserItem(user)\n    }\n}\n```\n\n## 3. Side Effects\n\n### LaunchedEffect vs SideEffect vs DisposableEffect\n\n```kotlin\n@Composable\nfun LocationScreen(locationService: LocationService) {\n    // Run once when key changes\n    LaunchedEffect(locationService) {\n        locationService.startTracking()\n    }\n\n    // Run on every recomposition\n    SideEffect {\n        analytics.logScreenView(\"location\")\n    }\n\n    // With cleanup\n    DisposableEffect(locationService) {\n        val listener = locationService.addListener { }\n        onDispose {\n            locationService.removeListener(listener)\n        }\n    }\n}\n```\n\n## 4. Modifiers Best Practices\n\n### Order Matters\n\n```kotlin\n@Composable\nfun ClickableCard() {\n    Box(\n        modifier = Modifier\n            .padding(16.dp)      // Padding tr∆∞·ªõc\n            .clickable { }       // Clickable sau\n            .background(Color.Blue)\n    )\n}\n```\n\n### Reuse Modifiers\n\n```kotlin\n@Composable\nfun MyScreen() {\n    val commonModifier = Modifier\n        .fillMaxWidth()\n        .padding(horizontal = 16.dp)\n\n    Column {\n        Text(\"Title\", modifier = commonModifier)\n        Text(\"Subtitle\", modifier = commonModifier)\n    }\n}\n```\n\n## 5. Preview Best Practices\n\n### Multiple Previews\n\n```kotlin\n@Preview(name = \"Light Mode\")\n@Preview(name = \"Dark Mode\", uiMode = UI_MODE_NIGHT_YES)\n@Preview(name = \"Large Font\", fontScale = 1.5f)\n@Composable\nfun UserCardPreview() {\n    MyTheme {\n        UserCard(\n            user = User(\n                id = \"1\",\n                name = \"John Doe\",\n                avatar = \"https://example.com/avatar.jpg\"\n            )\n        )\n    }\n}\n```\n\n## 6. Navigation\n\n### Type-safe Navigation\n\n```kotlin\n@Serializable\ndata class ProfileRoute(val userId: String)\n\n@Composable\nfun NavigationGraph(navController: NavHostController) {\n    NavHost(navController, startDestination = \"home\") {\n        composable(\"home\") {\n            HomeScreen(\n                onProfileClick = { userId ->\n                    navController.navigate(ProfileRoute(userId))\n                }\n            )\n        }\n\n        composable\u003CProfileRoute> { backStackEntry ->\n            val route = backStackEntry.toRoute\u003CProfileRoute>()\n            ProfileScreen(userId = route.userId)\n        }\n    }\n}\n```\n\n## 7. Testing\n\n### UI Testing\n\n```kotlin\n@Test\nfun userCard_displaysCorrectInfo() {\n    composeTestRule.setContent {\n        UserCard(testUser)\n    }\n\n    composeTestRule\n        .onNodeWithText(testUser.name)\n        .assertIsDisplayed()\n\n    composeTestRule\n        .onNodeWithContentDescription(\"User avatar\")\n        .assertExists()\n}\n```\n\n## 8. Common Pitfalls to Avoid\n\n### 1. Using MutableState directly in ViewModel\n\n```kotlin\n// ‚ùå Bad\nclass MyViewModel : ViewModel() {\n    val state = mutableStateOf(UiState())\n}\n\n// ‚úÖ Good\nclass MyViewModel : ViewModel() {\n    private val _state = MutableStateFlow(UiState())\n    val state = _state.asStateFlow()\n}\n```\n\n### 2. Not using derivedStateOf\n\n```kotlin\n@Composable\nfun SearchScreen(items: List\u003CItem>) {\n    var query by remember { mutableStateOf(\"\") }\n\n    // ‚ùå Bad - recalculates on every recomposition\n    val filtered = items.filter { it.name.contains(query) }\n\n    // ‚úÖ Good - only recalculates when dependencies change\n    val filtered by remember(items, query) {\n        derivedStateOf {\n            items.filter { it.name.contains(query) }\n        }\n    }\n}\n```\n\n## K·∫øt lu·∫≠n\n\nJetpack Compose l√† m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω, nh∆∞ng ƒë·ªÉ s·ª≠ d·ª•ng hi·ªáu qu·∫£ c·∫ßn hi·ªÉu r√µ c√°c best practices. Hy v·ªçng nh·ªØng tips n√†y gi√∫p b·∫°n vi·∫øt Compose code t·ªët h∆°n!\n\nC√≥ c√¢u h·ªèi? Comment b√™n d∆∞·ªõi ho·∫∑c connect v·ªõi m√¨nh qua [LinkedIn](https://linkedin.com/in/khoivan)!","src/content/blog/jetpack-compose-best-practices.md","bfee36afedd7daab",{"html":134,"metadata":135},"\u003Ch2 id=\"gi·ªõi-thi·ªáu\">Gi·ªõi thi·ªáu\u003C/h2>\n\u003Cp>Jetpack Compose ƒë√£ thay ƒë·ªïi ho√†n to√†n c√°ch ch√∫ng ta x√¢y d·ª±ng UI trong Android. Sau 2 nƒÉm l√†m vi·ªác v·ªõi Compose trong production, t√¥i mu·ªën chia s·∫ª nh·ªØng best practices gi√∫p code c·ªßa b·∫°n clean, performant v√† maintainable.\u003C/p>\n\u003Ch2 id=\"1-state-management\">1. State Management\u003C/h2>\n\u003Ch3 id=\"remember-vs-remembersaveable\">Remember vs RememberSaveable\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> CounterScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // S·∫Ω b·ªã reset khi configuration change\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">by\u003C/span>\u003Cspan style=\"color:#B392F0\"> remember\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#B392F0\">mutableStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ƒê∆∞·ª£c preserve qua configuration changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> savedCount \u003C/span>\u003Cspan style=\"color:#F97583\">by\u003C/span>\u003Cspan style=\"color:#B392F0\"> rememberSaveable\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#B392F0\">mutableStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"state-hoisting\">State Hoisting\u003C/h3>\n\u003Cp>Lu√¥n hoist state l√™n component cha khi c·∫ßn share gi·ªØa nhi·ªÅu composables:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> TodoScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> todos \u003C/span>\u003Cspan style=\"color:#F97583\">by\u003C/span>\u003Cspan style=\"color:#B392F0\"> remember\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#B392F0\">mutableStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">listOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Todo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    TodoList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        todos \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> todos,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        onTodoClick \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { todo \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // Handle click\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> TodoList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    todos: \u003C/span>\u003Cspan style=\"color:#B392F0\">List\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Todo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    onTodoClick: (\u003C/span>\u003Cspan style=\"color:#B392F0\">Todo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) -> \u003C/span>\u003Cspan style=\"color:#B392F0\">Unit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Stateless composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-performance-optimization\">2. Performance Optimization\u003C/h2>\n\u003Ch3 id=\"stable-types\">Stable Types\u003C/h3>\n\u003Cp>ƒê√°nh d·∫•u data classes v·ªõi \u003Ccode>@Stable\u003C/code> ho·∫∑c \u003Ccode>@Immutable\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Stable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">data\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id: \u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> name: \u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> avatar: \u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"remember-lambda\">Remember Lambda\u003C/h3>\n\u003Cp>Tr√°nh t·∫°o lambda m·ªõi trong m·ªói recomposition:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user: \u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, onClick: () \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Unit) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ‚ùå Bad - t·∫°o lambda m·ªõi m·ªói l·∫ßn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(onClick \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#B392F0\">onClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user.name)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ‚úÖ Good - pass tr·ª±c ti·∫øp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(onClick \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> onClick) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user.name)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"lazycolumn-keys\">LazyColumn Keys\u003C/h3>\n\u003Cp>Lu√¥n provide stable keys cho LazyColumn items:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">LazyColumn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    items\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        items \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        key \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { user \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user.id } \u003C/span>\u003Cspan style=\"color:#6A737D\">// Stable key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ) { user \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        UserItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-side-effects\">3. Side Effects\u003C/h2>\n\u003Ch3 id=\"launchedeffect-vs-sideeffect-vs-disposableeffect\">LaunchedEffect vs SideEffect vs DisposableEffect\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> LocationScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(locationService: \u003C/span>\u003Cspan style=\"color:#B392F0\">LocationService\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Run once when key changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    LaunchedEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(locationService) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        locationService.\u003C/span>\u003Cspan style=\"color:#B392F0\">startTracking\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Run on every recomposition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    SideEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        analytics.\u003C/span>\u003Cspan style=\"color:#B392F0\">logScreenView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"location\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // With cleanup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    DisposableEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(locationService) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> listener \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> locationService.\u003C/span>\u003Cspan style=\"color:#B392F0\">addListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        onDispose\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            locationService.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(listener)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"4-modifiers-best-practices\">4. Modifiers Best Practices\u003C/h2>\n\u003Ch3 id=\"order-matters\">Order Matters\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> ClickableCard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Box\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        modifier \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Modifier\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">padding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">16\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dp)      \u003C/span>\u003Cspan style=\"color:#6A737D\">// Padding tr∆∞·ªõc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">clickable\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { }       \u003C/span>\u003Cspan style=\"color:#6A737D\">// Clickable sau\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Color.Blue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"reuse-modifiers\">Reuse Modifiers\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> commonModifier \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Modifier\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">fillMaxWidth\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">padding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(horizontal \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 16\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dp)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Column\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Title\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, modifier \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> commonModifier)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Subtitle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, modifier \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> commonModifier)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-preview-best-practices\">5. Preview Best Practices\u003C/h2>\n\u003Ch3 id=\"multiple-previews\">Multiple Previews\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Preview\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Light Mode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Preview\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Dark Mode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, uiMode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> UI_MODE_NIGHT_YES)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Preview\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Large Font\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fontScale \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.5f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserCardPreview\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    MyTheme\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        UserCard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            user \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"John Doe\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                avatar \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://example.com/avatar.jpg\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"6-navigation\">6. Navigation\u003C/h2>\n\u003Ch3 id=\"type-safe-navigation\">Type-safe Navigation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Serializable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">data\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> ProfileRoute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> userId: \u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> NavigationGraph\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(navController: \u003C/span>\u003Cspan style=\"color:#B392F0\">NavHostController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    NavHost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(navController, startDestination \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"home\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        composable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"home\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            HomeScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onProfileClick \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { userId \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    navController.\u003C/span>\u003Cspan style=\"color:#B392F0\">navigate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">ProfileRoute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        composable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">ProfileRoute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> { backStackEntry \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> route \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> backStackEntry.\u003C/span>\u003Cspan style=\"color:#B392F0\">toRoute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">ProfileRoute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            ProfileScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> route.userId)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"7-testing\">7. Testing\u003C/h2>\n\u003Ch3 id=\"ui-testing\">UI Testing\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> userCard_displaysCorrectInfo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    composeTestRule.\u003C/span>\u003Cspan style=\"color:#B392F0\">setContent\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        UserCard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(testUser)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    composeTestRule\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">onNodeWithText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(testUser.name)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">assertIsDisplayed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    composeTestRule\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">onNodeWithContentDescription\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"User avatar\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">assertExists\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"8-common-pitfalls-to-avoid\">8. Common Pitfalls to Avoid\u003C/h2>\n\u003Ch3 id=\"1-using-mutablestate-directly-in-viewmodel\">1. Using MutableState directly in ViewModel\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ‚ùå Bad\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyViewModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> : \u003C/span>\u003Cspan style=\"color:#B392F0\">ViewModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> mutableStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">UiState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ‚úÖ Good\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyViewModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> : \u003C/span>\u003Cspan style=\"color:#B392F0\">ViewModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#F97583\"> val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> _state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> MutableStateFlow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">UiState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> _state.\u003C/span>\u003Cspan style=\"color:#B392F0\">asStateFlow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-not-using-derivedstateof\">2. Not using derivedStateOf\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@Composable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> SearchScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(items: \u003C/span>\u003Cspan style=\"color:#B392F0\">List\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Item\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> query \u003C/span>\u003Cspan style=\"color:#F97583\">by\u003C/span>\u003Cspan style=\"color:#B392F0\"> remember\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#B392F0\">mutableStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ‚ùå Bad - recalculates on every recomposition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filtered \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> items.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { it.name.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(query) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ‚úÖ Good - only recalculates when dependencies change\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filtered \u003C/span>\u003Cspan style=\"color:#F97583\">by\u003C/span>\u003Cspan style=\"color:#B392F0\"> remember\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(items, query) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        derivedStateOf\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            items.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { it.name.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(query) }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"k·∫øt-lu·∫≠n\">K·∫øt lu·∫≠n\u003C/h2>\n\u003Cp>Jetpack Compose l√† m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω, nh∆∞ng ƒë·ªÉ s·ª≠ d·ª•ng hi·ªáu qu·∫£ c·∫ßn hi·ªÉu r√µ c√°c best practices. Hy v·ªçng nh·ªØng tips n√†y gi√∫p b·∫°n vi·∫øt Compose code t·ªët h∆°n!\u003C/p>\n\u003Cp>C√≥ c√¢u h·ªèi? Comment b√™n d∆∞·ªõi ho·∫∑c connect v·ªõi m√¨nh qua \u003Ca href=\"https://linkedin.com/in/khoivan\">LinkedIn\u003C/a>!\u003C/p>",{"headings":136,"localImagePaths":204,"remoteImagePaths":205,"frontmatter":206,"imagePaths":209},[137,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201],{"depth":37,"slug":38,"text":39},{"depth":37,"slug":139,"text":140},"1-state-management","1. State Management",{"depth":47,"slug":142,"text":143},"remember-vs-remembersaveable","Remember vs RememberSaveable",{"depth":47,"slug":145,"text":146},"state-hoisting","State Hoisting",{"depth":37,"slug":148,"text":149},"2-performance-optimization","2. Performance Optimization",{"depth":47,"slug":151,"text":152},"stable-types","Stable Types",{"depth":47,"slug":154,"text":155},"remember-lambda","Remember Lambda",{"depth":47,"slug":157,"text":158},"lazycolumn-keys","LazyColumn Keys",{"depth":37,"slug":160,"text":161},"3-side-effects","3. Side Effects",{"depth":47,"slug":163,"text":164},"launchedeffect-vs-sideeffect-vs-disposableeffect","LaunchedEffect vs SideEffect vs DisposableEffect",{"depth":37,"slug":166,"text":167},"4-modifiers-best-practices","4. Modifiers Best Practices",{"depth":47,"slug":169,"text":170},"order-matters","Order Matters",{"depth":47,"slug":172,"text":173},"reuse-modifiers","Reuse Modifiers",{"depth":37,"slug":175,"text":176},"5-preview-best-practices","5. Preview Best Practices",{"depth":47,"slug":178,"text":179},"multiple-previews","Multiple Previews",{"depth":37,"slug":181,"text":182},"6-navigation","6. Navigation",{"depth":47,"slug":184,"text":185},"type-safe-navigation","Type-safe Navigation",{"depth":37,"slug":187,"text":188},"7-testing","7. Testing",{"depth":47,"slug":190,"text":191},"ui-testing","UI Testing",{"depth":37,"slug":193,"text":194},"8-common-pitfalls-to-avoid","8. Common Pitfalls to Avoid",{"depth":47,"slug":196,"text":197},"1-using-mutablestate-directly-in-viewmodel","1. Using MutableState directly in ViewModel",{"depth":47,"slug":199,"text":200},"2-not-using-derivedstateof","2. Not using derivedStateOf",{"depth":37,"slug":202,"text":203},"k·∫øt-lu·∫≠n","K·∫øt lu·∫≠n",[],[],{"title":123,"description":124,"pubDate":207,"author":17,"category":18,"tags":208,"featured":25,"language":27,"readingTime":129},["Date","2024-01-15T00:00:00.000Z"],[24,20,22,127,128],[],"debugging-at-2am",{"id":210,"data":212,"body":222,"filePath":223,"digest":224,"rendered":225},{"title":213,"description":214,"pubDate":215,"author":17,"category":62,"tags":216,"mood":221,"draft":25,"featured":26,"language":27,"readingTime":67,"categorySlug":62},"C√† ph√™ s·ªØa ƒë√°, m√¨ g√≥i, v√† production bug l√∫c 2 gi·ªù s√°ng","C√¢u chuy·ªán v·ªÅ m·ªôt ƒë√™m debug production c·ªßa banking app, v√† nh·ªØng b√†i h·ªçc kh√¥ng c√≥ trong s√°ch v·ªü",["Date","2024-01-31T17:00:00.000Z"],[217,218,62,219,220],"debugging","production","vietnam","banking","personal","## 2:14 AM - ƒêi·ªán tho·∫°i rung\n\nƒêang say gi·∫•c th√¨ ƒëi·ªán tho·∫°i rung li√™n t·ª•c. M·ªü m·∫Øt nh√¨n m√†n h√¨nh: 5 missed calls t·ª´ DevOps team.\n\n\"Production down r·ªìi anh ∆°i. App banking crash khi user login.\"\n\nTh·∫ø l√† leo d·∫≠y, pha ly c√† ph√™ s·ªØa ƒë√° (l√∫c n√†y qu√°n c√† ph√™ n√†o m·ªü ƒë√¢u), b·∫≠t laptop l√™n. Ngo√†i c·ª≠a s·ªï, S√†i G√≤n im l·∫∑ng hi·∫øm hoi. Ch·ªâ c√≥ ti·∫øng xe m√°y th·ªânh tho·∫£ng l∆∞·ªõt qua.\n\n## 2:45 AM - The Hunt Begins\n\n```kotlin\n// Logcat shows this beauty\nFatal Exception: java.lang.NullPointerException\nat com.bankingapp.auth.LoginViewModel.kt:156\n```\n\nLine 156? C√°i line m√† t√¥i commit 3 th√°ng tr∆∞·ªõc, ch·∫°y ngon l√†nh qua 2 m√¥i tr∆∞·ªùng test, 1 m√¥i tr∆∞·ªùng staging, v√† production g·∫ßn 100 ng√†y?\n\nM·ªü Slack, th·∫•y message t·ª´ Product Manager: \"5 tri·ªáu users kh√¥ng login ƒë∆∞·ª£c. Fix ASAP.\"\n\nNo pressure. üòÖ\n\n## 3:30 AM - M√¨ g√≥i v√† Revelation\n\nV·ª´a h√∫p m√¨ t√¥m v·ª´a ƒë·ªçc code. V√† r·ªìi t√¥i th·∫•y n√≥...\n\n```kotlin\n// Someone changed this in another module\ncompanion object {\n    // Moved from const val to lazy initialization \n    val TOKEN_EXPIRY = lazy { \n        RemoteConfig.getLong(\"token_expiry\") \n    }\n}\n```\n\nAi ƒë√≥ ƒë√£ thay ƒë·ªïi c√°ch load config, t·ª´ const sang lazy. V√† RemoteConfig ch∆∞a k·ªãp initialize khi LoginViewModel g·ªçi ƒë·∫øn.\n\n**Race condition.** C√°i th·ª© ch·ªâ xu·∫•t hi·ªán khi c√≥ 5 tri·ªáu users ƒë·ªìng lo·∫°t m·ªü app sau khi Firebase Remote Config update.\n\n## 4:00 AM - The Fix\n\n```kotlin\n// Quick fix for production\nval tokenExpiry = try {\n    TOKEN_EXPIRY.value\n} catch (e: Exception) {\n    DEFAULT_TOKEN_EXPIRY // Fallback value\n}\n```\n\nDeploy hotfix. Test nhanh. Push to production.\n\n## 4:30 AM - S√†i G√≤n th·ª©c d·∫≠y\n\nApp ho·∫°t ƒë·ªông tr·ªü l·∫°i. Slack im l·∫∑ng. Nh√¨n ra c·ª≠a s·ªï, tr·ªùi ƒë√£ h·ª≠ng s√°ng. Xe m√°y b·∫Øt ƒë·∫ßu ƒë√¥ng. Ti·∫øng c√≤i xe, ti·∫øng rao b√°n b√°nh m√¨.\n\nXu·ªëng nh√†, mua ly c√† ph√™ s·ªØa ƒë√° th·∫≠t t·ª´ c√¥ NƒÉm g√≥c ƒë∆∞·ªùng. Ng·ªìi v·ªâa h√®, nh√¨n th√†nh ph·ªë th·ª©c gi·∫•c, nghƒ© v·ªÅ ƒë√™m v·ª´a qua.\n\n## Lessons Learned (kh√¥ng c√≥ trong Clean Architecture)\n\n1. **Production lu√¥n kh√°c local** - D√π test k·ªπ ƒë·∫øn ƒë√¢u, production v·∫´n c√≥ c√°ch surprise b·∫°n.\n\n2. **Race conditions are evil** - Ch√∫ng ·∫©n n√°u, ch·ªù ƒë√∫ng l√∫c ƒë·ªÉ ph√° ho·∫°i. Nh∆∞ con mu·ªói trong ph√≤ng ng·ªß v·∫≠y.\n\n3. **Defensive programming is not paranoid** - Fallback values ƒë√£ c·ª©u r·ªói 5 tri·ªáu users ƒë√™m nay.\n\n4. **C√† ph√™ s·ªØa ƒë√° l√∫c 4:30 AM hits different** - Ng·ªçt ng√†o h∆°n, ƒë·∫≠m ƒë√† h∆°n, c√≥ v·ªã c·ªßa victory.\n\n5. **Banking apps = High stakes** - Khi b·∫°n handle ti·ªÅn c·ªßa ng∆∞·ªùi kh√°c, m·ªói bug l√† m·ªôt responsibility n·∫∑ng n·ªÅ.\n\n## The Morning After\n\n9:00 AM - Team meeting.\n\n\"Good job fixing it quickly!\" - Manager n√≥i.\n\nNh∆∞ng t√¥i bi·∫øt, ƒë√™m nay v·ªÅ nh√† ph·∫£i refactor c√°i module config. Ph·∫£i vi·∫øt th√™m test cho race conditions. Ph·∫£i document l·∫°i cho team.\n\nV√† ph·∫£i mua th√™m m√¨ g√≥i d·ª± tr·ªØ. Just in case. üçú\n\n---\n\n*P/S: ƒê√¢y l√† l√Ω do t·∫°i sao t√¥i lu√¥n c√≥ 1 h·ªôp m√¨ t√¥m, 1 h·ªôp c√† ph√™ s·ªØa ƒë√° h√≤a tan trong drawer. You never know when production decides to throw a party at 2 AM.*\n\n*P/P/S: C·∫£m ∆°n c√¥ NƒÉm ƒë√£ m·ªü qu√°n t·ª´ 4:30 s√°ng. You're the real MVP.*","src/content/blog/debugging-at-2am.md","a9767ba991aabcbd",{"html":226,"metadata":227},"\u003Ch2 id=\"214-am---ƒëi·ªán-tho·∫°i-rung\">2:14 AM - ƒêi·ªán tho·∫°i rung\u003C/h2>\n\u003Cp>ƒêang say gi·∫•c th√¨ ƒëi·ªán tho·∫°i rung li√™n t·ª•c. M·ªü m·∫Øt nh√¨n m√†n h√¨nh: 5 missed calls t·ª´ DevOps team.\u003C/p>\n\u003Cp>‚ÄúProduction down r·ªìi anh ∆°i. App banking crash khi user login.‚Äù\u003C/p>\n\u003Cp>Th·∫ø l√† leo d·∫≠y, pha ly c√† ph√™ s·ªØa ƒë√° (l√∫c n√†y qu√°n c√† ph√™ n√†o m·ªü ƒë√¢u), b·∫≠t laptop l√™n. Ngo√†i c·ª≠a s·ªï, S√†i G√≤n im l·∫∑ng hi·∫øm hoi. Ch·ªâ c√≥ ti·∫øng xe m√°y th·ªânh tho·∫£ng l∆∞·ªõt qua.\u003C/p>\n\u003Ch2 id=\"245-am---the-hunt-begins\">2:45 AM - The Hunt Begins\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Logcat shows this beauty\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Fatal Exception: \u003C/span>\u003Cspan style=\"color:#B392F0\">java\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.lang.NullPointerException\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">at com.bankingapp.auth.LoginViewModel.kt:\u003C/span>\u003Cspan style=\"color:#B392F0\">156\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Line 156? C√°i line m√† t√¥i commit 3 th√°ng tr∆∞·ªõc, ch·∫°y ngon l√†nh qua 2 m√¥i tr∆∞·ªùng test, 1 m√¥i tr∆∞·ªùng staging, v√† production g·∫ßn 100 ng√†y?\u003C/p>\n\u003Cp>M·ªü Slack, th·∫•y message t·ª´ Product Manager: ‚Äú5 tri·ªáu users kh√¥ng login ƒë∆∞·ª£c. Fix ASAP.‚Äù\u003C/p>\n\u003Cp>No pressure. üòÖ\u003C/p>\n\u003Ch2 id=\"330-am---m√¨-g√≥i-v√†-revelation\">3:30 AM - M√¨ g√≥i v√† Revelation\u003C/h2>\n\u003Cp>V·ª´a h√∫p m√¨ t√¥m v·ª´a ƒë·ªçc code. V√† r·ªìi t√¥i th·∫•y n√≥‚Ä¶\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Someone changed this in another module\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">companion\u003C/span>\u003Cspan style=\"color:#F97583\"> object\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Moved from const val to lazy initialization \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TOKEN_EXPIRY \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> lazy\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        RemoteConfig.\u003C/span>\u003Cspan style=\"color:#B392F0\">getLong\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"token_expiry\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Ai ƒë√≥ ƒë√£ thay ƒë·ªïi c√°ch load config, t·ª´ const sang lazy. V√† RemoteConfig ch∆∞a k·ªãp initialize khi LoginViewModel g·ªçi ƒë·∫øn.\u003C/p>\n\u003Cp>\u003Cstrong>Race condition.\u003C/strong> C√°i th·ª© ch·ªâ xu·∫•t hi·ªán khi c√≥ 5 tri·ªáu users ƒë·ªìng lo·∫°t m·ªü app sau khi Firebase Remote Config update.\u003C/p>\n\u003Ch2 id=\"400-am---the-fix\">4:00 AM - The Fix\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Quick fix for production\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> tokenExpiry \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    TOKEN_EXPIRY.\u003C/span>\u003Cspan style=\"color:#F97583\">value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e: \u003C/span>\u003Cspan style=\"color:#B392F0\">Exception\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    DEFAULT_TOKEN_EXPIRY \u003C/span>\u003Cspan style=\"color:#6A737D\">// Fallback value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Deploy hotfix. Test nhanh. Push to production.\u003C/p>\n\u003Ch2 id=\"430-am---s√†i-g√≤n-th·ª©c-d·∫≠y\">4:30 AM - S√†i G√≤n th·ª©c d·∫≠y\u003C/h2>\n\u003Cp>App ho·∫°t ƒë·ªông tr·ªü l·∫°i. Slack im l·∫∑ng. Nh√¨n ra c·ª≠a s·ªï, tr·ªùi ƒë√£ h·ª≠ng s√°ng. Xe m√°y b·∫Øt ƒë·∫ßu ƒë√¥ng. Ti·∫øng c√≤i xe, ti·∫øng rao b√°n b√°nh m√¨.\u003C/p>\n\u003Cp>Xu·ªëng nh√†, mua ly c√† ph√™ s·ªØa ƒë√° th·∫≠t t·ª´ c√¥ NƒÉm g√≥c ƒë∆∞·ªùng. Ng·ªìi v·ªâa h√®, nh√¨n th√†nh ph·ªë th·ª©c gi·∫•c, nghƒ© v·ªÅ ƒë√™m v·ª´a qua.\u003C/p>\n\u003Ch2 id=\"lessons-learned-kh√¥ng-c√≥-trong-clean-architecture\">Lessons Learned (kh√¥ng c√≥ trong Clean Architecture)\u003C/h2>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Production lu√¥n kh√°c local\u003C/strong> - D√π test k·ªπ ƒë·∫øn ƒë√¢u, production v·∫´n c√≥ c√°ch surprise b·∫°n.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Race conditions are evil\u003C/strong> - Ch√∫ng ·∫©n n√°u, ch·ªù ƒë√∫ng l√∫c ƒë·ªÉ ph√° ho·∫°i. Nh∆∞ con mu·ªói trong ph√≤ng ng·ªß v·∫≠y.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Defensive programming is not paranoid\u003C/strong> - Fallback values ƒë√£ c·ª©u r·ªói 5 tri·ªáu users ƒë√™m nay.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>C√† ph√™ s·ªØa ƒë√° l√∫c 4:30 AM hits different\u003C/strong> - Ng·ªçt ng√†o h∆°n, ƒë·∫≠m ƒë√† h∆°n, c√≥ v·ªã c·ªßa victory.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Banking apps = High stakes\u003C/strong> - Khi b·∫°n handle ti·ªÅn c·ªßa ng∆∞·ªùi kh√°c, m·ªói bug l√† m·ªôt responsibility n·∫∑ng n·ªÅ.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-morning-after\">The Morning After\u003C/h2>\n\u003Cp>9:00 AM - Team meeting.\u003C/p>\n\u003Cp>‚ÄúGood job fixing it quickly!‚Äù - Manager n√≥i.\u003C/p>\n\u003Cp>Nh∆∞ng t√¥i bi·∫øt, ƒë√™m nay v·ªÅ nh√† ph·∫£i refactor c√°i module config. Ph·∫£i vi·∫øt th√™m test cho race conditions. Ph·∫£i document l·∫°i cho team.\u003C/p>\n\u003Cp>V√† ph·∫£i mua th√™m m√¨ g√≥i d·ª± tr·ªØ. Just in case. üçú\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cem>P/S: ƒê√¢y l√† l√Ω do t·∫°i sao t√¥i lu√¥n c√≥ 1 h·ªôp m√¨ t√¥m, 1 h·ªôp c√† ph√™ s·ªØa ƒë√° h√≤a tan trong drawer. You never know when production decides to throw a party at 2 AM.\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>P/P/S: C·∫£m ∆°n c√¥ NƒÉm ƒë√£ m·ªü qu√°n t·ª´ 4:30 s√°ng. You‚Äôre the real MVP.\u003C/em>\u003C/p>",{"headings":228,"localImagePaths":250,"remoteImagePaths":251,"frontmatter":252,"imagePaths":255},[229,232,235,238,241,244,247],{"depth":37,"slug":230,"text":231},"214-am---ƒëi·ªán-tho·∫°i-rung","2:14 AM - ƒêi·ªán tho·∫°i rung",{"depth":37,"slug":233,"text":234},"245-am---the-hunt-begins","2:45 AM - The Hunt Begins",{"depth":37,"slug":236,"text":237},"330-am---m√¨-g√≥i-v√†-revelation","3:30 AM - M√¨ g√≥i v√† Revelation",{"depth":37,"slug":239,"text":240},"400-am---the-fix","4:00 AM - The Fix",{"depth":37,"slug":242,"text":243},"430-am---s√†i-g√≤n-th·ª©c-d·∫≠y","4:30 AM - S√†i G√≤n th·ª©c d·∫≠y",{"depth":37,"slug":245,"text":246},"lessons-learned-kh√¥ng-c√≥-trong-clean-architecture","Lessons Learned (kh√¥ng c√≥ trong Clean Architecture)",{"depth":37,"slug":248,"text":249},"the-morning-after","The Morning After",[],[],{"title":213,"description":214,"pubDate":253,"author":17,"category":62,"tags":254,"featured":26,"language":27,"mood":221},"Feb 01 2024",[217,218,62,219,220],[],"xml-to-compose-migration-story",{"id":256,"data":258,"body":265,"filePath":266,"digest":267,"deferredRender":26},{"title":259,"description":260,"pubDate":261,"author":17,"category":18,"tags":262,"mood":264,"draft":25,"featured":25,"language":27,"readingTime":67,"categorySlug":18},"From XML Hell to Jetpack Compose: Migrating 100,000 Lines of UI Code","The real story of migrating a banking Android app to Jetpack Compose - the wins, the failures, and that one time we broke production",["Date","2025-01-08T00:00:00.000Z"],[20,24,263,127],"migration","reflective","I still have nightmares about `activity_transaction_detail.xml`. 1,847 lines of nested LinearLayouts, RelativeLayouts, and ConstraintLayouts. Seven levels of ViewGroups deep. A ScrollView containing a RecyclerView (yes, that's as bad as it sounds). And my personal favorite: a comment from 2018 that just said \"// TODO: Refactor this mess - Hung\".\n\nIt was March 2023 when our tech lead dropped the bomb: \"We're migrating to Jetpack Compose.\" I looked at our codebase - 100,000+ lines of XML layouts accumulated over five years, custom views that nobody understood anymore, and a design system held together by copy-paste and prayer. \n\n\"How long do you think it'll take?\" he asked.\n\n\"Six months,\" I said confidently.\n\nIt took fourteen.\n\n## The Monster We Were Dealing With\n\nLet me paint you a picture of our XML situation. Here's a real excerpt from our transaction detail screen:\n\n```xml\n\u003C!-- activity_transaction_detail.xml - Line 234 to 298 (yes, out of 1,847) -->\n\u003CLinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n    \n    \u003CRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        \n        \u003CLinearLayout\n            android:id=\"@+id/amount_container\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:layout_alignParentStart=\"true\">\n            \n            \u003CTextView\n                android:id=\"@+id/currency_symbol\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"‚Ç´\"\n                android:textSize=\"24sp\"\n                android:textColor=\"@color/primary_text\"\n                android:layout_marginEnd=\"4dp\" />\n            \n            \u003CTextView\n                android:id=\"@+id/amount_major\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"32sp\"\n                android:textColor=\"@color/primary_text\"\n                android:textStyle=\"bold\" />\n            \n            \u003CTextView\n                android:id=\"@+id/amount_decimal_separator\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\".\"\n                android:textSize=\"24sp\"\n                android:textColor=\"@color/secondary_text\" />\n            \n            \u003CTextView\n                android:id=\"@+id/amount_minor\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"20sp\"\n                android:textColor=\"@color/secondary_text\" />\n        \u003C/LinearLayout>\n        \n        \u003CImageView\n            android:id=\"@+id/transaction_status_icon\"\n            android:layout_width=\"24dp\"\n            android:layout_height=\"24dp\"\n            android:layout_alignParentEnd=\"true\"\n            android:layout_centerVertical=\"true\"\n            android:src=\"@drawable/ic_pending\"\n            android:visibility=\"gone\" />\n    \u003C/RelativeLayout>\n    \n    \u003C!-- 1,783 more lines of this... -->\n\u003C/LinearLayout>\n```\n\nAnd the corresponding Activity code to populate it:\n\n```kotlin\n// TransactionDetailActivity.kt\nclass TransactionDetailActivity : BaseActivity() {\n    \n    private lateinit var currencySymbol: TextView\n    private lateinit var amountMajor: TextView\n    private lateinit var amountDecimalSeparator: TextView\n    private lateinit var amountMinor: TextView\n    private lateinit var statusIcon: ImageView\n    // ... 47 more view references\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_transaction_detail)\n        \n        initViews()\n        setupListeners()\n        loadTransaction()\n    }\n    \n    private fun initViews() {\n        currencySymbol = findViewById(R.id.currency_symbol)\n        amountMajor = findViewById(R.id.amount_major)\n        amountDecimalSeparator = findViewById(R.id.amount_decimal_separator)\n        amountMinor = findViewById(R.id.amount_minor)\n        statusIcon = findViewById(R.id.transaction_status_icon)\n        // ... 47 more findViewById calls\n    }\n    \n    private fun displayAmount(amount: Long) {\n        val formatted = NumberFormat.getInstance(Locale(\"vi\", \"VN\")).format(amount)\n        val parts = formatted.split(\".\")\n        \n        if (parts.size > 1) {\n            amountMajor.text = parts[0]\n            amountDecimalSeparator.visibility = View.VISIBLE\n            amountMinor.text = parts[1]\n            amountMinor.visibility = View.VISIBLE\n        } else {\n            amountMajor.text = formatted\n            amountDecimalSeparator.visibility = View.GONE\n            amountMinor.visibility = View.GONE\n        }\n        \n        // Update status icon based on amount\n        when {\n            amount > 50000000 -> {\n                statusIcon.setImageResource(R.drawable.ic_high_value)\n                statusIcon.visibility = View.VISIBLE\n            }\n            amount \u003C 0 -> {\n                statusIcon.setImageResource(R.drawable.ic_refund)\n                statusIcon.visibility = View.VISIBLE\n            }\n            else -> {\n                statusIcon.visibility = View.GONE\n            }\n        }\n    }\n}\n```\n\nLooking at this code now, I understand why Hung never refactored it. Where would you even start?\n\n## The First Attempt: Big Bang Migration\n\nMy initial plan was ambitious and, in hindsight, incredibly naive. I created a new branch called `feature/compose-migration` and decided to rewrite the entire UI layer from scratch.\n\nDay 1 was glorious. I rewrote our login screen in Compose:\n\n```kotlin\n@Composable\nfun LoginScreen(\n    onLoginClick: (String, String) -> Unit,\n    onForgotPasswordClick: () -> Unit\n) {\n    var username by remember { mutableStateOf(\"\") }\n    var password by remember { mutableStateOf(\"\") }\n    \n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(24.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Image(\n            painter = painterResource(R.drawable.logo),\n            contentDescription = \"Bank Logo\",\n            modifier = Modifier.size(120.dp)\n        )\n        \n        Spacer(modifier = Modifier.height(32.dp))\n        \n        OutlinedTextField(\n            value = username,\n            onValueChange = { username = it },\n            label = { Text(\"T√™n ƒëƒÉng nh·∫≠p\") },\n            modifier = Modifier.fillMaxWidth()\n        )\n        \n        Spacer(modifier = Modifier.height(16.dp))\n        \n        OutlinedTextField(\n            value = password,\n            onValueChange = { password = it },\n            label = { Text(\"M·∫≠t kh·∫©u\") },\n            visualTransformation = PasswordVisualTransformation(),\n            modifier = Modifier.fillMaxWidth()\n        )\n        \n        Spacer(modifier = Modifier.height(24.dp))\n        \n        Button(\n            onClick = { onLoginClick(username, password) },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(\"ƒêƒÉng nh·∫≠p\")\n        }\n        \n        TextButton(onClick = onForgotPasswordClick) {\n            Text(\"Qu√™n m·∫≠t kh·∫©u?\")\n        }\n    }\n}\n```\n\n20 lines of Compose replaced 156 lines of XML and 89 lines of Kotlin. I was feeling like a superhero.\n\nBy day 5, reality hit. Our custom OTP input view - a critical component used in 12 different screens - was 2,000 lines of custom view code with intricate animations, accessibility features, and edge cases handled over years of production use.\n\nI tried to recreate it in Compose:\n\n```kotlin\n@Composable\nfun OtpInput(\n    length: Int = 6,\n    onOtpComplete: (String) -> Unit\n) {\n    var otpValues by remember { mutableStateOf(List(length) { \"\" }) }\n    val focusRequesters = remember { List(length) { FocusRequester() } }\n    \n    Row(\n        horizontalArrangement = Arrangement.spacedBy(8.dp)\n    ) {\n        otpValues.forEachIndexed { index, value ->\n            OutlinedTextField(\n                value = value,\n                onValueChange = { newValue ->\n                    if (newValue.length \u003C= 1 && newValue.all { it.isDigit() }) {\n                        val newOtpValues = otpValues.toMutableList()\n                        newOtpValues[index] = newValue\n                        otpValues = newOtpValues\n                        \n                        // Move to next field\n                        if (newValue.isNotEmpty() && index \u003C length - 1) {\n                            focusRequesters[index + 1].requestFocus()\n                        }\n                        \n                        // Check if complete\n                        if (newOtpValues.all { it.isNotEmpty() }) {\n                            onOtpComplete(newOtpValues.joinToString(\"\"))\n                        }\n                    }\n                },\n                modifier = Modifier\n                    .weight(1f)\n                    .focusRequester(focusRequesters[index]),\n                textStyle = TextStyle(\n                    fontSize = 24.sp,\n                    textAlign = TextAlign.Center\n                ),\n                singleLine = true\n            )\n        }\n    }\n    \n    // Auto-focus first field\n    LaunchedEffect(Unit) {\n        focusRequesters[0].requestFocus()\n    }\n}\n```\n\nIt looked similar, but the behavior was all wrong. Paste support was broken. Backspace didn't move to the previous field. The animation when typing was janky. Accessibility was non-existent.\n\nAfter two weeks, I had migrated exactly 3 screens out of 127. At this rate, we'd be done in 2027.\n\n## The Pivot: Incremental Migration\n\nI deleted my branch (RIP two weeks of work) and started over with a different approach. Instead of rewriting everything, we'd migrate incrementally, screen by screen, keeping both XML and Compose running side by side.\n\nThe first step was setting up interoperability:\n\n```kotlin\n// ComposeView in XML layout\n\u003Candroidx.compose.ui.platform.ComposeView\n    android:id=\"@+id/compose_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\" />\n\n// In Activity/Fragment\ncomposeView.setContent {\n    BankingAppTheme {\n        // Compose content here\n        TransactionCard(transaction = currentTransaction)\n    }\n}\n```\n\nThis let us migrate component by component. We started with leaf components - things with no dependencies:\n\n```kotlin\n// Before: Custom XML view for transaction status badge\n\u003Ccom.bankingapp.ui.views.TransactionStatusBadge\n    android:id=\"@+id/status_badge\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:status=\"@{transaction.status}\" />\n\n// After: Compose component\n@Composable\nfun TransactionStatusBadge(status: TransactionStatus) {\n    val (text, backgroundColor, textColor) = when (status) {\n        TransactionStatus.SUCCESS -> Triple(\"Th√†nh c√¥ng\", Color.Green, Color.White)\n        TransactionStatus.PENDING -> Triple(\"ƒêang x·ª≠ l√Ω\", Color.Yellow, Color.Black)\n        TransactionStatus.FAILED -> Triple(\"Th·∫•t b·∫°i\", Color.Red, Color.White)\n    }\n    \n    Surface(\n        color = backgroundColor,\n        shape = RoundedCornerShape(12.dp)\n    ) {\n        Text(\n            text = text,\n            color = textColor,\n            modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),\n            fontSize = 12.sp,\n            fontWeight = FontWeight.Medium\n        )\n    }\n}\n```\n\n## The Design System Disaster\n\nThree months in, we hit our first major crisis. Our designers had been maintaining a design system in Figma, but our implementation was... creative. The same button could look different on different screens because developers copied and modified styles instead of using them.\n\nI found 47 different shades of our \"primary\" blue color:\n\n```xml\n\u003C!-- From various colors.xml files across the app -->\n\u003Ccolor name=\"primary_blue\">#0B74B8\u003C/color>\n\u003Ccolor name=\"main_blue\">#0B73B7\u003C/color>\n\u003Ccolor name=\"button_blue\">#0C74B8\u003C/color>\n\u003Ccolor name=\"primary\">#0B74B9\u003C/color>\n\u003Ccolor name=\"blue_primary\">#0A74B8\u003C/color>\n\u003C!-- ... 42 more variations -->\n```\n\nIn Compose, we decided to fix this once and for all:\n\n```kotlin\n// ui/theme/Color.kt\nobject BankingColors {\n    val Primary = Color(0xFF0B74B8)  // The ONE true primary\n    val PrimaryVariant = Color(0xFF085A91)\n    val Secondary = Color(0xFFF39200)\n    val Background = Color(0xFFF5F5F5)\n    val Surface = Color(0xFFFFFFFF)\n    val Error = Color(0xFFD32F2F)\n    val OnPrimary = Color(0xFFFFFFFF)\n    val OnSecondary = Color(0xFF000000)\n    val OnBackground = Color(0xFF212121)\n    val OnSurface = Color(0xFF212121)\n    val OnError = Color(0xFFFFFFFF)\n}\n\n// ui/theme/Theme.kt\n@Composable\nfun BankingAppTheme(\n    darkTheme: Boolean = isSystemInDarkModeEnabled(),\n    content: @Composable () -> Unit\n) {\n    val colors = if (darkTheme) {\n        darkColorScheme(\n            primary = BankingColors.Primary,\n            // ... dark theme colors\n        )\n    } else {\n        lightColorScheme(\n            primary = BankingColors.Primary,\n            // ... light theme colors\n        )\n    }\n    \n    MaterialTheme(\n        colorScheme = colors,\n        typography = BankingTypography,\n        content = content\n    )\n}\n```\n\nThe design team was thrilled. The other developers... less so. I had to update 237 XML files to use the new canonical colors. It took a week, and I'm pretty sure some developers still haven't forgiven me.\n\n## The Performance Surprise\n\nSix months in, we had migrated about 40% of our screens. Then our QA team dropped a bomb: \"The new Compose screens feel slower than the old ones.\"\n\nI was shocked. Compose was supposed to be faster! I spent three days profiling and found the culprit - excessive recomposition:\n\n```kotlin\n// The problematic code\n@Composable\nfun TransactionList(transactions: List\u003CTransaction>) {\n    LazyColumn {\n        items(transactions) { transaction ->\n            // This caused every item to recompose when any transaction changed!\n            TransactionRow(\n                transaction = transaction,\n                onClick = { \n                    // Inline lambda = new instance every recomposition\n                    navigateToDetail(transaction.id) \n                }\n            )\n        }\n    }\n}\n```\n\nThe fix was simple but not obvious:\n\n```kotlin\n@Composable\nfun TransactionList(\n    transactions: List\u003CTransaction>,\n    onTransactionClick: (String) -> Unit  // Stable parameter\n) {\n    LazyColumn {\n        items(\n            items = transactions,\n            key = { it.id }  // Stable keys for smart recomposition\n        ) { transaction ->\n            TransactionRow(\n                transaction = transaction,\n                onClick = { onTransactionClick(transaction.id) }\n            )\n        }\n    }\n}\n\n// Make data classes stable\n@Immutable\ndata class Transaction(\n    val id: String,\n    val amount: Long,\n    val description: String,\n    val timestamp: Instant,\n    val status: TransactionStatus\n)\n```\n\nAfter optimization, the Compose screens were actually 30% faster than XML. The lesson? Compose is fast, but you have to understand how it works.\n\n## The Day We Broke Production\n\nIt was a Thursday (it's always a Thursday). We had just migrated the transfer screen to Compose and pushed it to production with our usual staged rollout - 1% of users first.\n\nWithin an hour, our error tracking exploded:\n\n```\nFatal Exception: java.lang.IllegalStateException: \nViewTreeLifecycleOwner not found from androidx.compose.ui.platform.ComposeView\n```\n\n2,000 crashes in 30 minutes. We rolled back immediately.\n\nThe issue? Our money transfer flow was weird. It started in `TransferActivity`, opened `RecipientSelectionActivity` for result, then came back to complete the transfer. But we were initializing Compose UI in `onActivityResult`:\n\n```kotlin\n// The broken code\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    \n    if (requestCode == SELECT_RECIPIENT && resultCode == RESULT_OK) {\n        val recipient = data?.getParcelableExtra\u003CRecipient>(\"recipient\")\n        \n        // This was the problem - ComposeView wasn't ready yet\n        binding.composeView.setContent {\n            TransferConfirmation(\n                recipient = recipient,\n                amount = pendingAmount\n            )\n        }\n    }\n}\n```\n\nThe fix was embarrassing:\n\n```kotlin\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    \n    if (requestCode == SELECT_RECIPIENT && resultCode == RESULT_OK) {\n        val recipient = data?.getParcelableExtra\u003CRecipient>(\"recipient\")\n        \n        // Wait for the view to be ready\n        binding.composeView.post {\n            binding.composeView.setContent {\n                TransferConfirmation(\n                    recipient = recipient,\n                    amount = pendingAmount\n                )\n            }\n        }\n    }\n}\n```\n\nOne `post { }` call. That's all it took. But it cost us a sleepless night and a very uncomfortable meeting with the product team.\n\n## The Custom View Challenge\n\nRemember that OTP input component I struggled with? We eventually got it working, but it took a completely different approach:\n\n```kotlin\n@Composable\nfun OtpInput(\n    length: Int = 6,\n    onOtpComplete: (String) -> Unit,\n    modifier: Modifier = Modifier\n) {\n    var otpText by remember { mutableStateOf(\"\") }\n    val focusRequester = remember { FocusRequester() }\n    val keyboardController = LocalSoftwareKeyboardController.current\n    \n    // Hidden TextField that actually handles input\n    Box(modifier = modifier) {\n        BasicTextField(\n            value = otpText,\n            onValueChange = { value ->\n                if (value.length \u003C= length && value.all { it.isDigit() }) {\n                    otpText = value\n                    if (value.length == length) {\n                        onOtpComplete(value)\n                        keyboardController?.hide()\n                    }\n                }\n            },\n            modifier = Modifier\n                .focusRequester(focusRequester)\n                .alpha(0f), // Invisible but functional\n            keyboardOptions = KeyboardOptions(\n                keyboardType = KeyboardType.Number\n            )\n        )\n        \n        // Visual representation\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(8.dp),\n            modifier = Modifier.clickable { \n                focusRequester.requestFocus()\n                keyboardController?.show()\n            }\n        ) {\n            repeat(length) { index ->\n                val char = otpText.getOrNull(index)\n                OtpDigitBox(\n                    digit = char?.toString() ?: \"\",\n                    isFocused = otpText.length == index\n                )\n            }\n        }\n    }\n    \n    LaunchedEffect(Unit) {\n        focusRequester.requestFocus()\n    }\n}\n\n@Composable\nfun OtpDigitBox(\n    digit: String,\n    isFocused: Boolean\n) {\n    val animatedBorderColor by animateColorAsState(\n        targetValue = if (isFocused) MaterialTheme.colorScheme.primary \n                      else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f),\n        animationSpec = tween(200)\n    )\n    \n    Box(\n        modifier = Modifier\n            .size(48.dp)\n            .border(\n                width = 2.dp,\n                color = animatedBorderColor,\n                shape = RoundedCornerShape(8.dp)\n            ),\n        contentAlignment = Alignment.Center\n    ) {\n        Text(\n            text = digit,\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold\n        )\n        \n        // Cursor animation\n        if (isFocused && digit.isEmpty()) {\n            Box(\n                modifier = Modifier\n                    .size(2.dp, 24.dp)\n                    .background(MaterialTheme.colorScheme.primary)\n                    .blinkingCursor()\n            )\n        }\n    }\n}\n\nfun Modifier.blinkingCursor(): Modifier = composed {\n    val infiniteTransition = rememberInfiniteTransition()\n    val alpha by infiniteTransition.animateFloat(\n        initialValue = 1f,\n        targetValue = 0f,\n        animationSpec = infiniteRepeatable(\n            animation = keyframes {\n                durationMillis = 1000\n                0.0f at 500\n            },\n            repeatMode = RepeatMode.Reverse\n        )\n    )\n    this.alpha(alpha)\n}\n```\n\nThe trick was using an invisible `BasicTextField` for input handling while creating a custom visual representation. It took three iterations to get right, but the final version was actually better than our original XML custom view.\n\n## The State Management Revelation\n\nAbout eight months in, we realized we had a bigger problem than just UI migration. Our state management was a mess. Each Activity had its own way of handling data:\n\n```kotlin\n// Some used LiveData\nclass TransactionViewModel : ViewModel() {\n    private val _transactions = MutableLiveData\u003CList\u003CTransaction>>()\n    val transactions: LiveData\u003CList\u003CTransaction>> = _transactions\n}\n\n// Some used RxJava\nclass AccountViewModel : ViewModel() {\n    val accounts: Observable\u003CList\u003CAccount>> = accountRepository\n        .getAccounts()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n}\n\n// Some used callbacks\nclass ProfileActivity : BaseActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        profileRepository.getProfile(object : Callback\u003CProfile> {\n            override fun onSuccess(profile: Profile) {\n                updateUI(profile)\n            }\n            override fun onError(error: Throwable) {\n                showError(error)\n            }\n        })\n    }\n}\n```\n\nWith Compose, we standardized on StateFlow and a unidirectional data flow:\n\n```kotlin\n// Standard ViewModel pattern\nclass TransactionViewModel(\n    private val repository: TransactionRepository\n) : ViewModel() {\n    \n    private val _uiState = MutableStateFlow(TransactionUiState())\n    val uiState: StateFlow\u003CTransactionUiState> = _uiState.asStateFlow()\n    \n    fun loadTransactions() {\n        viewModelScope.launch {\n            _uiState.update { it.copy(isLoading = true) }\n            \n            repository.getTransactions()\n                .flowOn(Dispatchers.IO)\n                .catch { error ->\n                    _uiState.update { \n                        it.copy(\n                            isLoading = false,\n                            error = error.message\n                        )\n                    }\n                }\n                .collect { transactions ->\n                    _uiState.update {\n                        it.copy(\n                            isLoading = false,\n                            transactions = transactions,\n                            error = null\n                        )\n                    }\n                }\n        }\n    }\n}\n\n// In Compose\n@Composable\nfun TransactionScreen(\n    viewModel: TransactionViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n    \n    when {\n        uiState.isLoading -> LoadingScreen()\n        uiState.error != null -> ErrorScreen(uiState.error)\n        else -> TransactionList(uiState.transactions)\n    }\n}\n```\n\nThis consistency made the codebase so much easier to understand. New developers could jump between features without learning a new pattern each time.\n\n## The Unexpected Benefits\n\nTen months in, something interesting happened. Our crash rate dropped by 40%. Not because of Compose directly, but because the migration forced us to:\n\n1. **Fix ancient bugs**: \"While we're migrating this screen, let's fix that weird crash from 2019\"\n2. **Remove dead code**: We found entire features that were unused but still maintained\n3. **Improve architecture**: The migration was a perfect excuse to implement proper patterns\n4. **Update dependencies**: Some screens were using libraries from 2017\n\nWe also discovered Compose made certain features trivial that were nightmares in XML:\n\n```kotlin\n// Dark mode support - literally one line\nval colors = if (isSystemInDarkModeEnabled()) darkColors else lightColors\n\n// Animations that would take 100 lines of XML\nval offset by animateDpAsState(\n    targetValue = if (isExpanded) 0.dp else (-100).dp,\n    animationSpec = spring(stiffness = Spring.StiffnessLow)\n)\n\n// Conditional UI that's actually readable\nif (user.isPremium) {\n    PremiumFeatures()\n} else {\n    StandardFeatures()\n    UpgradePrompt()\n}\n```\n\n## The Final Push\n\nMonth 12. We were at 85% migrated. The remaining 15% were the scariest screens - payment flows, KYC verification, and the home dashboard that hadn't been touched since 2018.\n\nThe home dashboard was particularly terrifying. It was a `RecyclerView` with 17 different view types, each with its own complex layout:\n\n```kotlin\n// The old ViewHolder nightmare\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n    return when (viewType) {\n        TYPE_HEADER -> HeaderViewHolder(inflater.inflate(R.layout.item_header, parent, false))\n        TYPE_BALANCE -> BalanceViewHolder(inflater.inflate(R.layout.item_balance, parent, false))\n        TYPE_QUICK_ACTIONS -> QuickActionsViewHolder(inflater.inflate(R.layout.item_quick_actions, parent, false))\n        TYPE_PROMOTION -> PromotionViewHolder(inflater.inflate(R.layout.item_promotion, parent, false))\n        TYPE_TRANSACTION -> TransactionViewHolder(inflater.inflate(R.layout.item_transaction, parent, false))\n        // ... 12 more types\n        else -> throw IllegalArgumentException(\"Unknown view type: $viewType\")\n    }\n}\n```\n\nIn Compose, it became beautifully simple:\n\n```kotlin\n@Composable\nfun HomeScreen(\n    sections: List\u003CHomeSection>,\n    onSectionClick: (HomeSection) -> Unit\n) {\n    LazyColumn(\n        modifier = Modifier.fillMaxSize(),\n        contentPadding = PaddingValues(vertical = 16.dp)\n    ) {\n        items(sections) { section ->\n            when (section) {\n                is HomeSection.Header -> HeaderSection(section)\n                is HomeSection.Balance -> BalanceSection(section)\n                is HomeSection.QuickActions -> QuickActionsSection(section)\n                is HomeSection.Promotion -> PromotionSection(section)\n                is HomeSection.Transaction -> TransactionSection(section)\n                // So much cleaner!\n            }\n        }\n    }\n}\n```\n\n## The Launch\n\nFebruary 2024. Fourteen months after starting. We finally removed the last XML layout file. The entire UI was now Compose.\n\nThe numbers:\n- **Before**: 127 XML layouts, ~100,000 lines of XML, ~50,000 lines of View code\n- **After**: 0 XML layouts, ~30,000 lines of Compose code\n- **Reduction**: 70% less UI code\n- **Build time**: 35% faster (no more layout inflation!)\n- **APK size**: 2.3MB smaller (removed layout XML resources)\n\nBut the real win wasn't the numbers. It was the developer experience. Features that would take a week now took two days. UI bugs became rare. New developers could contribute immediately without learning our weird custom view conventions.\n\n## What I'd Do Differently\n\nLooking back, here's what I wish I knew at the start:\n\n1. **Start with new features**: Instead of migrating existing screens, build new features in Compose first. It's less risky and lets you learn gradually.\n\n2. **Invest in education early**: I learned Compose as I went. Bad idea. Take a week to really understand recomposition, state management, and performance.\n\n3. **Build the design system first**: We did it halfway through and had to refactor everything. Start with a solid foundation.\n\n4. **Don't migrate everything**: Some of our admin screens are still XML. They work fine, nobody cares. Focus on screens that matter.\n\n5. **Automate testing from day one**: Compose has excellent testing support. Use it. We added tests later and found bugs that had been there for months.\n\n## The Surprise Ending\n\nRemember that transaction detail screen with 1,847 lines of XML? Here's the Compose version:\n\n```kotlin\n@Composable\nfun TransactionDetailScreen(\n    transaction: Transaction,\n    onBack: () -> Unit,\n    onShare: () -> Unit\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Chi ti·∫øt giao d·ªãch\") },\n                navigationIcon = {\n                    IconButton(onClick = onBack) {\n                        Icon(Icons.Default.ArrowBack, \"Back\")\n                    }\n                },\n                actions = {\n                    IconButton(onClick = onShare) {\n                        Icon(Icons.Default.Share, \"Share\")\n                    }\n                }\n            )\n        }\n    ) { paddingValues ->\n        LazyColumn(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues),\n            contentPadding = PaddingValues(16.dp),\n            verticalArrangement = Arrangement.spacedBy(16.dp)\n        ) {\n            item { \n                AmountSection(\n                    amount = transaction.amount,\n                    status = transaction.status\n                )\n            }\n            \n            item { \n                DetailSection(\n                    title = \"Th√¥ng tin chuy·ªÉn kho·∫£n\",\n                    details = transaction.transferDetails\n                )\n            }\n            \n            item { \n                DetailSection(\n                    title = \"Ng∆∞·ªùi nh·∫≠n\",\n                    details = transaction.recipientDetails\n                )\n            }\n            \n            if (transaction.notes.isNotEmpty()) {\n                item {\n                    NotesSection(notes = transaction.notes)\n                }\n            }\n            \n            item {\n                ActionButtons(\n                    transaction = transaction,\n                    onRepeat = { /* Handle repeat */ },\n                    onSave = { /* Handle save */ }\n                )\n            }\n        }\n    }\n}\n```\n\nAbout 150 lines total including all the sub-components. 92% less code. And Hung finally got his refactor - just six years late.\n\n## Final Thoughts\n\nWas it worth it? Absolutely. But not for the reasons we expected.\n\nYes, we have less code. Yes, it's faster. Yes, it's easier to maintain. But the real value was the forced modernization. The migration made us fix years of technical debt, establish proper patterns, and actually document our code.\n\nThe funniest part? Three months after we finished, Google announced Compose Multiplatform. Our iOS team is now jealously watching us share UI code between Android and desktop apps.\n\nWould I do it again? In a heartbeat. But I'd probably give a more realistic timeline. \"Six months\" became fourteen, but those fourteen months transformed not just our codebase, but our entire development culture.\n\nAnd that comment from Hung - \"// TODO: Refactor this mess\"? I finally deleted it. Then I sent him a message: \"Done. Only took six years.\"\n\nHis response? \"Great! Now migrate it to Compose Multiplatform üòÖ\"\n\nSome TODOs never die. They just evolve.\n\n---\n\n*If you're considering a Compose migration, feel free to reach out on [Twitter](https://twitter.com/khoivan). I have a 47-slide presentation on \"Lessons Learned\" that my manager made me create. It's yours if you want it.*\n\n*And yes, we're hiring. Especially if you know Compose Multiplatform. Hung wasn't entirely joking.*","src/content/blog/xml-to-compose-migration-story.mdx","7361e32450ce74be","my-first-production-crash",{"id":268,"data":270,"body":276,"filePath":277,"digest":278,"deferredRender":26},{"title":271,"description":272,"pubDate":273,"author":17,"category":62,"tags":274,"mood":264,"draft":25,"featured":25,"language":27,"readingTime":67,"categorySlug":62},"That Morning 50,000 Users Couldn't Login: My First Production Crash","The story of my first major production incident - how a simple SharedPreferences migration brought down a banking app, and what I learned about debugging under pressure",["Date","2025-01-07T00:00:00.000Z"],[217,218,20,275],"war-stories","June 15th, 2021, 6:47 AM. I was having ph·ªü for breakfast at my favorite spot in District 1 when my phone exploded. Not literally - though that would have been less stressful than what actually happened.\n\n17 Slack notifications. 8 missed calls. 23 WhatsApp messages. All variations of the same theme: \"THE APP IS BROKEN. NOBODY CAN LOGIN. FIX IT NOW.\"\n\nI threw 50,000 VND on the table and ran. Literally ran. Four blocks to the office, laptop bouncing in my backpack, already sweating through my shirt in the Saigon morning humidity. By the time I reached the office, Crashlytics showed 47,000 crashes in the last hour.\n\nThis is the story of the worst morning of my career, and paradoxically, the day I became a real engineer.\n\n## The Calm Before the Storm\n\nLet me rewind two days. We had just pushed version 3.7.0 to production. It was a minor release - some UI tweaks, performance improvements, and one seemingly innocent change: migrating from SharedPreferences to DataStore for better async handling.\n\n```kotlin\n// The migration code that seemed so simple\nclass PreferencesMigration(private val context: Context) {\n    \n    suspend fun migrate() {\n        val sharedPrefs = context.getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\n        val dataStore = context.dataStore\n        \n        // Migrate all preferences\n        sharedPrefs.all.forEach { (key, value) ->\n            when (value) {\n                is String -> dataStore.edit { prefs ->\n                    prefs[stringPreferencesKey(key)] = value\n                }\n                is Int -> dataStore.edit { prefs ->\n                    prefs[intPreferencesKey(key)] = value\n                }\n                is Boolean -> dataStore.edit { prefs ->\n                    prefs[booleanPreferencesKey(key)] = value\n                }\n                // ... handle other types\n            }\n        }\n        \n        // Clear old SharedPreferences after successful migration\n        sharedPrefs.edit().clear().apply()\n    }\n}\n```\n\nI had tested it thoroughly. On my device. On the QA team's devices. On the beta program with 500 users. Everything worked perfectly.\n\nWhat I didn't test was what happens when 50,000 users try to migrate simultaneously at 6:30 AM - peak login time for our banking app.\n\n## The Crime Scene\n\nWhen I finally got to my desk and opened Crashlytics, the stack trace made no sense:\n\n```\nFatal Exception: java.lang.IllegalStateException: \n    SharedPreferences file /data/data/com.bankingapp/shared_prefs/user_prefs.xml \n    already exists but is not readable\n    \n    at android.app.SharedPreferencesImpl.loadFromDisk(SharedPreferencesImpl.java:115)\n    at android.app.SharedPreferencesImpl.\u003Cinit>(SharedPreferencesImpl.java:73)\n    at android.app.ContextImpl.getSharedPreferences(ContextImpl.java:419)\n    at com.bankingapp.data.PreferencesMigration.migrate(PreferencesMigration.kt:8)\n    at com.bankingapp.MainActivity.onCreate(MainActivity.kt:47)\n```\n\n\"Already exists but is not readable\"? How is that possible?\n\nI started digging through the crash reports. They all had something in common - they were from users who had been using the app for over a year. New installations were fine. Recent users were fine. But our loyal, long-term users? Completely locked out.\n\n## The Investigation\n\nFirst instinct: rollback. But our product manager shut that down immediately. \"We can't rollback. The new version fixes a critical security vulnerability. We need to fix forward.\"\n\nGreat. No pressure.\n\nI started by trying to reproduce the issue. I installed the old version, added a bunch of preferences, then updated to the new version. It worked fine. I tried with different amounts of data. Still fine. I was about to scream when our junior developer, Minh, asked a simple question:\n\n\"What if the file permissions are wrong?\"\n\nFile permissions. On Android. Each app has its own sandbox, so permissions shouldn't matter, right? Wrong.\n\nI SSH'd into our test device (yes, we had rooted test devices for exactly this purpose) and checked:\n\n```bash\nbanking_test:/ $ su\nbanking_test:/ # cd /data/data/com.bankingapp/shared_prefs/\nbanking_test:/data/data/com.bankingapp/shared_prefs # ls -la\n\n-rw-rw---- 1 u0_a142 u0_a142   4096 Jun 15 06:30 user_prefs.xml\n-rw-rw---- 1 u0_a142 u0_a142    512 Jun 15 06:30 user_prefs.xml.bak\n```\n\nNormal. But then I checked a crashed user's device (we had remote debug access for some power users who opted in):\n\n```bash\n-rw------- 1 root root   4096 Jun 15 06:30 user_prefs.xml\n-rw-rw---- 1 u0_a245 u0_a245    512 Jun 15 06:30 user_prefs.xml.bak\n```\n\nThe file was owned by root! How the hell did that happen?\n\n## The Eureka Moment\n\nI was staring at the migration code when it hit me. The clear() operation:\n\n```kotlin\n// Clear old SharedPreferences after successful migration\nsharedPrefs.edit().clear().apply()\n```\n\nIn certain Android versions (particularly custom ROMs popular in Vietnam like BKAV or Viettel), when you clear SharedPreferences while another process is reading them, the file gets recreated with wrong permissions. It's a race condition that only happens under specific circumstances:\n\n1. User opens app (migration starts)\n2. Our background sync service also starts (reads SharedPreferences)\n3. Migration completes and calls clear()\n4. OS recreates the file but assigns wrong permissions\n5. Next access fails\n\nBut why only old users? Because they had accumulated lots of preferences, making the migration take longer, increasing the window for the race condition.\n\n## The Hot Fix\n\nWe needed a fix that could be deployed immediately. No time for elegant solutions. I wrote the hackiest code of my career:\n\n```kotlin\nclass EmergencyPreferencesFix {\n    \n    fun fixPermissions(context: Context): Boolean {\n        return try {\n            // Try to access preferences normally\n            val prefs = context.getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\n            prefs.getString(\"test\", null)\n            true\n        } catch (e: Exception) {\n            // If failed, try alternative approach\n            tryAlternativeAccess(context)\n        }\n    }\n    \n    private fun tryAlternativeAccess(context: Context): Boolean {\n        // Nuclear option: delete and recreate\n        val prefsFile = File(context.filesDir.parent, \"shared_prefs/user_prefs.xml\")\n        val backupFile = File(context.filesDir.parent, \"shared_prefs/user_prefs.xml.bak\")\n        \n        return try {\n            // Try to read backup\n            if (backupFile.exists() && backupFile.canRead()) {\n                // Parse XML manually (yes, really)\n                val prefs = parsePreferencesXml(backupFile)\n                \n                // Delete corrupted file\n                prefsFile.delete()\n                backupFile.delete()\n                \n                // Recreate with correct permissions\n                val newPrefs = context.getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\n                val editor = newPrefs.edit()\n                \n                prefs.forEach { (key, value) ->\n                    when (value) {\n                        is String -> editor.putString(key, value)\n                        is Int -> editor.putInt(key, value)\n                        is Boolean -> editor.putBoolean(key, value)\n                        is Float -> editor.putFloat(key, value)\n                        is Long -> editor.putLong(key, value)\n                    }\n                }\n                \n                editor.apply()\n                true\n            } else {\n                // Last resort: start fresh\n                prefsFile.delete()\n                backupFile.delete()\n                \n                // Create new preferences with default values\n                initializeDefaultPreferences(context)\n                true\n            }\n        } catch (e: Exception) {\n            // If everything fails, at least log it\n            FirebaseCrashlytics.getInstance().recordException(e)\n            false\n        }\n    }\n    \n    private fun parsePreferencesXml(file: File): Map\u003CString, Any> {\n        // I'm not proud of this code\n        val prefs = mutableMapOf\u003CString, Any>()\n        \n        try {\n            val content = file.readText()\n            \n            // Regex parsing XML because XmlPullParser wasn't working\n            // (Yes, I know, please don't judge)\n            val stringPattern = \"\u003Cstring name=\\\"(.+?)\\\">(.+?)\u003C/string>\".toRegex()\n            val intPattern = \"\u003Cint name=\\\"(.+?)\\\" value=\\\"(.+?)\\\" />\".toRegex()\n            val boolPattern = \"\u003Cboolean name=\\\"(.+?)\\\" value=\\\"(.+?)\\\" />\".toRegex()\n            \n            stringPattern.findAll(content).forEach {\n                prefs[it.groupValues[1]] = it.groupValues[2]\n            }\n            \n            intPattern.findAll(content).forEach {\n                prefs[it.groupValues[1]] = it.groupValues[2].toInt()\n            }\n            \n            boolPattern.findAll(content).forEach {\n                prefs[it.groupValues[1]] = it.groupValues[2].toBoolean()\n            }\n        } catch (e: Exception) {\n            // Silent fail, we'll use defaults\n        }\n        \n        return prefs\n    }\n}\n```\n\nI'm not proud of this code. Parsing XML with regex? Manually recreating SharedPreferences? It's everything they tell you not to do. But it worked.\n\n## The Deployment Drama\n\n9:30 AM. We had a fix. But how do you deploy to 50,000 angry users who can't even open the app?\n\nOur solution was creative: we deployed a special version (3.7.1) that didn't require login for the first screen. It would:\n1. Show a \"Maintenance\" message\n2. Run the fix in the background\n3. Auto-restart the app when fixed\n\nBut Google Play review takes hours, sometimes days. We couldn't wait.\n\nThat's when our Head of Engineering made the call: \"Deploy through our CDN.\"\n\nWe had an emergency update mechanism built into the app (for exactly this kind of situation) that could download and apply patches without going through the Play Store. It was meant for critical security fixes, but this qualified.\n\n```kotlin\nclass EmergencyPatcher {\n    fun checkAndApplyPatch() {\n        val patchUrl = \"https://cdn.bankingapp.com/emergency/patch_3.7.1.jar\"\n        \n        // Download patch\n        val patchFile = downloadPatch(patchUrl)\n        \n        // Verify signature (CRITICAL for security)\n        if (!verifySignature(patchFile)) {\n            return\n        }\n        \n        // Load patch using DexClassLoader\n        val dexLoader = DexClassLoader(\n            patchFile.absolutePath,\n            context.cacheDir.absolutePath,\n            null,\n            this.javaClass.classLoader\n        )\n        \n        // Replace broken class with patched version\n        val patchedClass = dexLoader.loadClass(\"com.bankingapp.EmergencyPreferencesFix\")\n        val fixMethod = patchedClass.getMethod(\"fixPermissions\", Context::class.java)\n        \n        // Apply fix\n        val result = fixMethod.invoke(patchedClass.newInstance(), context) as Boolean\n        \n        if (result) {\n            // Restart app\n            restartApp()\n        }\n    }\n}\n```\n\nBy 10:15 AM, we pushed the patch. Within 30 minutes, crash rates started dropping.\n\n## The Clean-Up\n\nBy noon, 90% of affected users were fixed. But we still had 5,000 users whose apps were so broken they couldn't even download the patch. For them, we had to get creative.\n\nWe sent SMS messages (we're a bank, we have everyone's phone number) with a link to download a standalone fixer app:\n\n\"BankingApp: We detected an issue with your app. Please install this fix: https://fix.bankingapp.com/repair\"\n\nThe repair app was simple - it just needed permission to access the main app's data directory and fix the permissions. Not elegant, but effective.\n\n## The Post-Mortem\n\nTwo days later, when everyone could breathe again, we had the post-mortem. The room was tense. I expected to be fired.\n\nInstead, our CTO said something I'll never forget: \"This is the best mistake we've ever made.\"\n\nHe explained: \"We learned more about our system in these 6 hours than in the past year. We discovered:\n- Our emergency patch system actually works\n- Our monitoring needs improvement\n- Our rollout process has gaps\n- Our team can handle crisis\"\n\nThe lessons we implemented:\n\n### 1. Staged Rollouts Are Not Enough\n\nWe were doing staged rollouts (1% ‚Üí 5% ‚Üí 20% ‚Üí 100%), but over days. The issue manifested within hours. Now we have \"canary periods\" - 1% for at least 6 hours during peak usage before proceeding.\n\n### 2. Test on Real User Data\n\nOur QA environment had clean data. Real users had years of accumulated cruft. We now have a \"chaos testing\" environment with data copied from production (anonymized, of course).\n\n### 3. Race Conditions Are Everywhere\n\nWe added extensive synchronization around SharedPreferences operations:\n\n```kotlin\nobject PreferenceManager {\n    private val lock = Any()\n    \n    fun getPreferences(context: Context): SharedPreferences {\n        synchronized(lock) {\n            return context.getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\n        }\n    }\n    \n    fun migratePreferences(context: Context) {\n        synchronized(lock) {\n            // Migration code here\n        }\n    }\n}\n```\n\n### 4. Always Have a Rollback Plan\n\n\"We can't rollback\" should never be the answer. We now maintain compatibility layers:\n\n```kotlin\nclass PreferencesCompat {\n    fun getValue(key: String): Any? {\n        return try {\n            // Try new DataStore\n            getFromDataStore(key)\n        } catch (e: Exception) {\n            try {\n                // Fallback to SharedPreferences\n                getFromSharedPreferences(key)\n            } catch (e: Exception) {\n                // Return default\n                getDefaultValue(key)\n            }\n        }\n    }\n}\n```\n\n## The Human Cost\n\nWhat the post-mortem didn't capture was the human side. Our customer support team received over 10,000 calls that morning. One support agent, Linh, told me she had an elderly customer crying on the phone because he thought his money was gone.\n\nThat hit hard. For us, it was a technical problem. For users, it was their life savings apparently vanishing.\n\nI personally called 50 affected users to apologize. Most were understanding. One businessman said he missed a critical transfer and lost a deal. We compensated him, but you can't really compensate for lost opportunities.\n\n## The Silver Lining\n\nThree months later, something interesting happened. We had another production issue - a third-party service went down. But this time, we were ready. The emergency response plan kicked in:\n\n1. Alert triggered within 30 seconds\n2. War room assembled in 5 minutes\n3. Root cause identified in 15 minutes\n4. Fix deployed through emergency channel in 45 minutes\n5. Full resolution in under 2 hours\n\nThe muscle memory from that horrible morning had turned into institutional knowledge.\n\n## What I Really Learned\n\nTechnical lessons aside, that morning taught me some fundamental truths:\n\n**1. Humility**: No matter how much you test, production will surprise you. Stay humble.\n\n**2. Communication**: During the crisis, clear communication saved us. We over-communicated - Slack, email, SMS, even phone calls.\n\n**3. Team**: Minh, the junior who suggested checking permissions, got promoted. Good ideas can come from anywhere.\n\n**4. Users First**: Every technical decision has human consequences. Those 50,000 crashes were 50,000 people unable to access their money.\n\n**5. Post-Mortems Are Not Blame Games**: Our blameless post-mortem culture meant we could be honest about what went wrong.\n\n## The Code That Haunts Me\n\nYou know what the real fix was? The one we deployed in version 3.8.0 after proper testing?\n\n```kotlin\nclass SafePreferencesMigration {\n    suspend fun migrate(context: Context) {\n        // Don't clear immediately\n        val oldPrefs = context.getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\n        val newPrefs = context.getSharedPreferences(\"user_prefs_v2\", Context.MODE_PRIVATE)\n        \n        // Migrate to NEW file\n        oldPrefs.all.forEach { (key, value) ->\n            when (value) {\n                is String -> newPrefs.edit().putString(key, value).apply()\n                is Int -> newPrefs.edit().putInt(key, value).apply()\n                is Boolean -> newPrefs.edit().putBoolean(key, value).apply()\n                // ... other types\n            }\n        }\n        \n        // Keep old file around for 30 days as backup\n        // Mark it as migrated\n        oldPrefs.edit().putBoolean(\"MIGRATED_TO_V2\", true).apply()\n    }\n}\n```\n\nThat's it. Use a different file name. Don't delete the old one immediately. Such a simple solution that would have prevented everything.\n\n## One Year Later\n\nI still wake up sometimes at 6:47 AM with a spike of anxiety. It's like PTSD for developers. But I'm also grateful for that morning. It transformed me from a developer who wrote code to an engineer who understood systems.\n\nWe now have a tradition. Every June 15th at 6:47 AM, the team that was there that morning meets for ph·ªü. We call it \"Crash Day.\" We share war stories, laugh about the regex XML parser, and remind ourselves that we survived.\n\nLast Crash Day, Minh (now a senior engineer) raised his beer and said, \"To the crashes that make us better engineers.\"\n\nI'll drink to that.\n\n## Epilogue\n\nThat emergency patch system we used? It's now a core feature. We can push critical fixes to users within minutes. It's saved us three times since then.\n\nThe regex XML parser? It's still in the codebase. There's a comment above it:\n\n```kotlin\n/**\n * DO NOT REMOVE THIS CODE\n * Yes, it's horrible. Yes, it parses XML with regex.\n * But it saved 50,000 users on June 15, 2021.\n * Sometimes, bad code that works is better than good code that doesn't.\n * \n * If you must refactor this, please test with:\n * - Corrupted XML files\n * - Files with root permissions\n * - Files with special characters in values\n * - Files larger than 5MB\n * - Files that are currently being written to\n * \n * May the force be with you.\n */\n```\n\nIt's a monument to that morning. A reminder that perfect is the enemy of good, especially at 6:47 AM with 50,000 users locked out of their banking app.\n\nWould I do anything differently? Absolutely. Would I trade the experience? Never.\n\n---\n\n*If you're dealing with a production crisis right now, remember: breathe, communicate, and focus on the users. The code can be fixed. The architecture can be improved. But user trust, once lost, is hard to regain.*\n\n*And always, ALWAYS, test your SharedPreferences migrations.*","src/content/blog/my-first-production-crash.mdx","155f0d037d947a10","mobile-daily-1008",{"id":279,"data":281,"body":292,"filePath":293,"assetImports":294,"digest":296,"deferredRender":26},{"title":282,"description":283,"pubDate":284,"author":17,"heroImage":285,"category":18,"tags":286,"draft":25,"featured":25,"language":27,"readingTime":67,"heroImageAlt":282,"categorySlug":18},"Mobile Platform Intel ‚Äî Weekly ‚Äî 2025-08-10","B·∫£n tin Android/iOS cho mobile banking: b·∫£o m·∫≠t, policy, attestation, WebView; k√®m checklist h√†nh ƒë·ªông chi ti·∫øt.",["Date","2025-08-09T17:00:00.000Z"],"__ASTRO_IMAGE_/blog-placeholder.jpg",[20,287,288,289,290,291],"ios","policy","security","attestation","rasp","## TL;DR\n\nAndroid c√¥ng b·ªë Security Bulletin 2025-08 (y√™u c·∫ßu patch level 2025-08-05) v√† Pixel Update Bulletin ri√™ng. Google Play b·∫Øt bu·ªôc targetSdkVersion=35 (Android 15) cho app m·ªõi/c·∫≠p nh·∫≠t t·ª´ 2025-08-31. Chrome/WebView 139 ng·ª´ng h·ªó tr·ª£ Android 8/9, l√†m tƒÉng r·ªßi ro b·∫£o m·∫≠t v√† kh√°c bi·ªát rendering. iOS/iPadOS 18.6 v√° h√†ng ch·ª•c CVE (bao g·ªìm WebKit), c·∫ßn regression k·ªπ v·ªõi WKWebView. Frida 17.2.15 thay ƒë·ªïi footprint tr√™n iOS/Android, c·∫ßn c·∫≠p nh·∫≠t heuristic RASP v√† ki·ªÉm tra attestation.\n\n## ƒêi·ªÉm nh·∫•n\n\n- **[P0] android/security_patch** ‚Äî Android Security Bulletin 2025-08: v√° RCE/priv-esc; y√™u c·∫ßu patch level 2025-08-05 cho baseline QA.\n- **[P1] android/store_policy** ‚Äî Google Play target API: app m·ªõi/c·∫≠p nh·∫≠t ph·∫£i target API 35 t·ª´ 2025-08-31; Wear/Auto/TV v·∫´n 34.\n- **[P1] ios/security_patch** ‚Äî iOS/iPadOS 18.6: nhi·ªÅu v√° WebKit; t√°c ƒë·ªông tr·ª±c ti·∫øp t·ªõi WKWebView trong app.\n- **[P2] android/sdk_tooling** ‚Äî Chrome/WebView 139: ng·ª´ng h·ªó tr·ª£ Android 8/9; tƒÉng r·ªßi ro b·∫£o m·∫≠t tr√™n thi·∫øt b·ªã c≈©.\n- **[P2] cross-platform/security_patch** ‚Äî WebKitGTK/WPE WSA-2025-0005: CVE ƒë·ªìng b·ªô v·ªõi iOS 18.6, h·ªØu √≠ch ƒë·ªÉ map ph·∫°m vi.\n- **[P2] root_jailbreak/hook_tamper** ‚Äî Frida 17.2.15: c·∫≠p nh·∫≠t ƒë√°ng k·ªÉ cho iOS 26 v√† bridge Android; c·∫ßn l√†m m·ªõi c∆° ch·∫ø ph√°t hi·ªán.\n\n## Android\n\n### Android Security Bulletin ‚Äî August 2025\n\n#### ·∫¢nh h∆∞·ªüng t·ªõi app ng√¢n h√†ng\n\n- R·ªßi ro t·∫•n c√¥ng zero-click qua b·ªÅ m·∫∑t web/media v√† th√†nh ph·∫ßn h·ªá th·ªëng c√≥ ƒë·∫∑c quy·ªÅn.\n- C√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ƒëƒÉng nh·∫≠p, OTP, giao d·ªãch, x√°c minh camera KYC v√† t√≠nh ·ªïn ƒë·ªãnh WebView.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- Chu·∫©n ho√° baseline: thi·∫øt b·ªã QA ·ªü patch level ‚â• 2025-08-05; ch·∫°y smoke test ƒëƒÉng nh·∫≠p/OTP/giao d·ªãch, camera v√† n·ªôi dung web.\n- Gi√°m s√°t crash/ANR theo phi√™n b·∫£n OS/WebView; ƒë·∫∑t c·∫£nh b√°o khi spike b·∫•t th∆∞·ªùng.\n- R√† so√°t RASP/anti-debug; ƒë·∫£m b·∫£o UX fallback khi thi·∫øt b·ªã kh√¥ng ƒë·∫°t Play Integrity.\n\n### Pixel Update Bulletin ‚Äî August 2025\n\n#### ·∫¢nh h∆∞·ªüng\n\n- Pixel nh·∫≠n b·∫£n v√° b·ªï sung song song ASB, c√≥ c√°c s·ª≠a l·ªói li√™n quan modem/telephony.\n- OTP qua SMS/telephony v√† c√°c lu·ªìng x√°c th·ª±c s·ªë c√≥ th·ªÉ b·ªã t√°c ƒë·ªông n·∫øu firmware ch∆∞a c·∫≠p nh·∫≠t.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- C·∫≠p nh·∫≠t m·ªçi thi·∫øt b·ªã Pixel test l√™n patch 2025-08-05; test l·∫°i SMS OTP, g·ªçi x√°c minh, push notification.\n- Theo d√µi s·ª± kh√°c bi·ªát h√†nh vi modem/telephony sau khi c·∫≠p nh·∫≠t.\n\n### Google Play policy ‚Äî Target API 35 (t·ª´ 2025-08-31)\n\n#### ·∫¢nh h∆∞·ªüng\n\n- App m·ªõi v√† m·ªçi b·∫£n c·∫≠p nh·∫≠t ph·∫£i target API 35; app t·ªìn t·∫°i ph·∫£i target API 34+ ƒë·ªÉ ti·∫øp t·ª•c hi·ªÉn th·ªã v·ªõi ng∆∞·ªùi d√πng m·ªõi tr√™n OS m·ªõi.\n- C·∫ßn r√† so√°t disclosure v√† flow xin quy·ªÅn cho nh√≥m Health/Body Sensor.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- N√¢ng targetSdkVersion=35; c·∫≠p nh·∫≠t AGP/Gradle v√† pipeline CI.\n- D√πng SDK Upgrade Assistant; regression matrix API 29 ‚Üí 35 cho path n√¢ng c·∫•p.\n- L·∫≠p ph∆∞∆°ng √°n xin gia h·∫°n (n·∫øu √°p d·ª•ng) ƒë·ªÉ tr√°nh gi√°n ƒëo·∫°n ph√°t h√†nh.\n\n### Chrome/WebView 139 ng·ª´ng h·ªó tr·ª£ Android 8/9\n\n#### ·∫¢nh h∆∞·ªüng\n\n- Thi·∫øt b·ªã 8/9 kh√¥ng c√≤n c·∫≠p nh·∫≠t Chrome/WebView ‚áí r·ªßi ro b·∫£o m·∫≠t v√† kh√°c bi·ªát rendering/JS.\n- T√°c ƒë·ªông tr·ª±c ti·∫øp t·ªõi 3DS, statement viewer, OAuth/SSO in-app.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- ƒêi·ªÅu ch·ªânh matrix test y√™u c·∫ßu Android 10+ cho lu·ªìng web nh·∫°y c·∫£m.\n- √Åp d·ª•ng guardrail: h·∫°n ch·∫ø ch·ª©c nƒÉng nh·∫°y c·∫£m tr√™n WebView l·∫°c h·∫≠u; c·∫£nh b√°o n√¢ng OS.\n- Theo d√µi t·ª∑ l·ªá thi·∫øt b·ªã 8/9 v√† l√™n l·ªô tr√¨nh khuy·∫øn kh√≠ch n√¢ng c·∫•p.\n\n## iOS\n\n### iOS/iPadOS 18.6 ‚Äî Security Content\n\n#### ·∫¢nh h∆∞·ªüng t·ªõi app ng√¢n h√†ng\n\n- WKWebView b·ªã ·∫£nh h∆∞·ªüng b·ªüi nhi·ªÅu CVE WebKit (bao g·ªìm CVE ƒë√£ khai th√°c th·ª±c t·∫ø).\n- Nguy c∆° crash/khai th√°c tr√¨nh duy·ªát in-app; ·∫£nh h∆∞·ªüng SSO, 3DS, statement viewer, deep link.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- N√¢ng baseline QA l√™n iOS/iPadOS 18.6; regression web: ƒëƒÉng nh·∫≠p, OTP auto-fill, 3DS, link statement/PDF.\n- Theo d√µi Rapid Security Responses (RSR) v√† map CVE v·ªõi WebKitGTK/WPE ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng ph·∫°m vi tr√™n cross-platform.\n- X√°c minh ATS/pinning v√† c√°c bi·ªán ph√°p ch·ªëng UI spoofing/phishing sau khi n√¢ng WebKit.\n\n## Root / Jailbreak / Hook\n\n### Frida 17.2.15\n\n#### ·∫¢nh h∆∞·ªüng\n\n- C·∫£i thi·ªán instrument tr√™n iOS 26, t·ªëi ∆∞u bridge tr√™n Android; footprint thay ƒë·ªïi c√≥ th·ªÉ ·∫£nh h∆∞·ªüng heuristic ph√°t hi·ªán hook.\n- Heuristic c≈© (t√™n ti·∫øn tr√¨nh/lib, pipe/port) c√≥ nguy c∆° b·ªè l·ªçt khi ƒë·ªëi th·ªß n√¢ng phi√™n b·∫£n.\n\n#### H√†nh ƒë·ªông khuy·∫øn ngh·ªã\n\n- C·∫≠p nh·∫≠t heuristic RASP: ph√°t hi·ªán process injection, libfrida*, named pipe/port, v√† h√†nh vi IPC b·∫•t th∆∞·ªùng.\n- TƒÉng l·ªõp attestation (Play Integrity/App Attest) t·∫°i m√†n h√¨nh nh·∫°y c·∫£m v√† tr∆∞·ªõc khi th·ª±c hi·ªán giao d·ªãch.\n- Thu th·∫≠p telemetry ·∫©n danh ƒë·ªÉ theo d√µi t·ª∑ l·ªá thi·∫øt b·ªã nghi v·∫•n hook/root v√† t√°c ƒë·ªông t·ªõi conversion.\n\n## Checklist h√†nh ƒë·ªông\n\n### Act now\n\n- C·∫≠p nh·∫≠t thi·∫øt b·ªã test: Android 2025-08-05 v√† iOS/iPadOS 18.6.\n- Smoke/regression: ƒëƒÉng nh·∫≠p, OTP, giao d·ªãch, WebView/WKWebView, camera KYC.\n- B·∫≠t c·∫£nh b√°o & UX fallback khi Integrity/Biometric kh√¥ng ƒë·∫°t ho·∫∑c WebView qu√° c≈©.\n\n### Plan\n\n- N√¢ng targetSdkVersion=35; c·∫≠p nh·∫≠t AGP/Gradle, chu·∫©n ho√° pipeline CI/CD.\n- R√† so√°t disclosure Health/Body Sensor; c·∫≠p nh·∫≠t privacy notes trong store.\n- Chu·∫©n ho√° danh s√°ch thi·∫øt b·ªã t·ªëi thi·ªÉu (Android 10+ cho lu·ªìng web nh·∫°y c·∫£m).\n- B·ªï sung k·ªãch b·∫£n chaos/regression cho WebView/WKWebView (3DS, statement viewer, OAuth/SSO).\n\n### Monitor\n\n- Theo d√µi Pixel Update Bulletin v√† advisory WebKit/Chromium ti·∫øp theo.\n- Gi√°m s√°t crash/ANR theo phi√™n b·∫£n OS/WebView; l·∫≠p b√°o c√°o xu h∆∞·ªõng h√†ng tu·∫ßn.\n- C·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥ rule ph√°t hi·ªán hook cho Frida 17.2.x; ki·ªÉm tra bypass ph·ªï bi·∫øn.\n- Quan s√°t t·ª∑ l·ªá ng∆∞·ªùi d√πng Android 8/9; l·ªô tr√¨nh th√∫c ƒë·∫©y n√¢ng c·∫•p thi·∫øt b·ªã.\n\n## Ngu·ªìn tham kh·∫£o\n\n- [Android Security Bulletin ‚Äî August 2025](https://source.android.com/security/bulletin/2025-08-01)\n- [Pixel Update Bulletin ‚Äî August 2025](https://source.android.com/security/bulletin/pixel/2025-08-01)\n- [Meet Google Play's target API level requirement](https://developer.android.com/google/play/requirements/target-sdk)\n- [Sunsetting Chrome support for Android 8/9 (Chrome 139+)](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/android_version_support.md)\n- [About the security content of iOS 18.6 and iPadOS 18.6](https://support.apple.com/en-us/HT213844)\n- [WebKitGTK/WPE Security Advisory WSA-2025-0005](https://webkitgtk.org/security/WSA-2025-0005.html)\n- [Frida ‚Äî 17.2.15 release](https://github.com/frida/frida/releases/tag/17.2.15)","src/content/blog/mobile-daily-1008.mdx",[295],"/blog-placeholder.jpg","71583761a704169e","building-native-security-library-banking",{"id":297,"data":299,"body":306,"filePath":307,"digest":308,"deferredRender":26},{"title":300,"description":301,"pubDate":302,"author":17,"category":18,"tags":303,"mood":305,"draft":25,"featured":25,"language":27,"readingTime":67,"categorySlug":18},"Building a Native Security Library for a Banking Android App","The story of how I built a C++ security layer to protect sensitive banking data, from basic Java encryption to a full native library with anti-tampering",["Date","2025-01-09T00:00:00.000Z"],[20,289,304,220],"ndk","technical","It was 2:17 AM on a Tuesday when my phone started buzzing. Not the gentle notification buzz, but the angry, continuous vibration that meant something was seriously wrong. Our security team had detected unusual patterns in the API traffic - someone was attempting to reverse engineer our banking app's encryption keys.\n\nI rolled out of bed, opened my laptop, and stared at the Slack messages flooding in. Our banking app, used by over 2 million customers, was under attack. Not a data breach - thankfully - but sophisticated attempts to understand our security implementation. That night changed how I think about mobile security forever.\n\n## The Problem We Were Facing\n\nOur original implementation was what you'd expect from most Android apps:\n\n```kotlin\n// SecurityManager.kt - Our original approach\nclass SecurityManager(context: Context) {\n    private val prefs = context.getSharedPreferences(\"secure_prefs\", Context.MODE_PRIVATE)\n    private val cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\")\n    \n    fun encryptData(data: String): String {\n        val key = getOrCreateKey() // Stored in SharedPreferences üò±\n        cipher.init(Cipher.ENCRYPT_MODE, key)\n        return Base64.encodeToString(cipher.doFinal(data.toByteArray()), Base64.DEFAULT)\n    }\n    \n    private fun getOrCreateKey(): SecretKey {\n        val keyString = prefs.getString(\"encryption_key\", null)\n        return if (keyString != null) {\n            // Key stored as plain text in SharedPreferences\n            SecretKeySpec(Base64.decode(keyString, Base64.DEFAULT), \"AES\")\n        } else {\n            // Generate and store new key\n            val key = KeyGenerator.getInstance(\"AES\").apply {\n                init(256)\n            }.generateKey()\n            prefs.edit().putString(\"encryption_key\", \n                Base64.encodeToString(key.encoded, Base64.DEFAULT)).apply()\n            key\n        }\n    }\n}\n```\n\nLooking at this code now makes me cringe. We were storing encryption keys in SharedPreferences - essentially plain text files that any rooted device could access. It's like hiding your house key under the doormat and hoping nobody looks there.\n\nThe security audit report was damning: \"Keys extractable in under 5 minutes on a rooted device.\" For a banking app handling millions of transactions daily, this was unacceptable.\n\n## My First Attempt: Android Keystore\n\nMy initial reaction was to use Android's built-in Keystore system. It seemed like the obvious solution:\n\n```kotlin\n// SecurityManagerV2.kt - Using Android Keystore\nclass SecurityManagerV2(context: Context) {\n    private val keyAlias = \"BankingAppKey\"\n    private val keyStore = KeyStore.getInstance(\"AndroidKeyStore\").apply { load(null) }\n    \n    init {\n        if (!keyStore.containsAlias(keyAlias)) {\n            val keyGenParams = KeyGenParameterSpec.Builder(\n                keyAlias,\n                KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT\n            ).apply {\n                setBlockModes(KeyProperties.BLOCK_MODE_CBC)\n                setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)\n                setUserAuthenticationRequired(true) // Requires fingerprint\n                setUserAuthenticationValidityDurationSeconds(30)\n            }.build()\n            \n            KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\")\n                .apply { init(keyGenParams) }\n                .generateKey()\n        }\n    }\n    \n    fun encryptSensitiveData(data: String): ByteArray {\n        val key = keyStore.getKey(keyAlias, null) as SecretKey\n        val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\n        cipher.init(Cipher.ENCRYPT_MODE, key)\n        \n        val iv = cipher.iv\n        val ciphertext = cipher.doFinal(data.toByteArray())\n        \n        // Combine IV and ciphertext\n        return iv + ciphertext\n    }\n}\n```\n\nThis was better - the keys were hardware-backed on devices that supported it. But during testing, I discovered the limitations:\n1. Not all devices had hardware-backed keystores\n2. Some custom ROMs could still intercept Keystore operations\n3. The implementation was entirely in Java/Kotlin - easily decompilable\n\nI remember sitting in a meeting with our CISO, trying to explain why Android Keystore wasn't enough. \"But Google says it's secure,\" he said. I pulled up Jadx (a decompiler) and showed him our app's code, perfectly readable, with all our security logic exposed. His face went pale.\n\n## The Revelation: Going Native\n\nThat's when I realized we needed to go deeper - into native code. C++ isn't as easily decompiled as Java bytecode. Plus, we could implement additional protections that weren't possible in the JVM.\n\nI started simple, just moving the encryption logic to JNI:\n\n```cpp\n// native-lib.cpp - Version 1: Basic JNI encryption\n#include \u003Cjni.h>\n#include \u003Cstring>\n#include \u003Candroid/log.h>\n#include \u003Copenssl/aes.h>\n#include \u003Copenssl/rand.h>\n\n#define LOG_TAG \"SecurityNative\"\n#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n\nextern \"C\" JNIEXPORT jbyteArray JNICALL\nJava_com_bankingapp_security_NativeSecurityLib_encryptNative(\n    JNIEnv* env,\n    jobject /* this */,\n    jbyteArray data) {\n    \n    // Get data from Java\n    jsize dataLen = env->GetArrayLength(data);\n    jbyte* dataBytes = env->GetByteArrayElements(data, nullptr);\n    \n    // Generate random key (still not ideal - key management issue)\n    unsigned char key[32];\n    RAND_bytes(key, sizeof(key));\n    \n    // Encrypt using OpenSSL\n    AES_KEY aesKey;\n    AES_set_encrypt_key(key, 256, &aesKey);\n    \n    // Simplified encryption (real implementation needs IV, padding, etc.)\n    unsigned char encrypted[dataLen + 16];\n    AES_encrypt((unsigned char*)dataBytes, encrypted, &aesKey);\n    \n    env->ReleaseByteArrayElements(data, dataBytes, JNI_ABORT);\n    \n    // Return encrypted data\n    jbyteArray result = env->NewByteArray(dataLen + 16);\n    env->SetByteArrayRegion(result, 0, dataLen + 16, (jbyte*)encrypted);\n    \n    return result;\n}\n```\n\nThis was my first taste of JNI, and honestly, it was painful. The syntax felt alien after years of Kotlin. Memory management became my responsibility. Debugging was a nightmare - crashes gave cryptic messages like \"signal 11 (SIGSEGV), code 1 (SEGV_MAPERR)\".\n\nBut it worked. The encryption logic was now in compiled C++ code, much harder to reverse engineer.\n\n## Adding Anti-Tampering and Anti-Debugging\n\nSimply moving to native code wasn't enough. Determined attackers could still attach debuggers, modify the binary, or use tools like Frida to hook our functions. I needed to add active protections.\n\nFirst, I implemented debugger detection:\n\n```cpp\n// anti_debug.cpp\n#include \u003Csys/ptrace.h>\n#include \u003Cunistd.h>\n#include \u003Csys/types.h>\n#include \u003Csys/stat.h>\n#include \u003Cfcntl.h>\n#include \u003Cstring.h>\n\nbool isDebuggerAttached() {\n    // Method 1: Check TracerPid in /proc/self/status\n    char line[512];\n    FILE* fp = fopen(\"/proc/self/status\", \"r\");\n    if (fp) {\n        while (fgets(line, sizeof(line), fp)) {\n            if (strncmp(line, \"TracerPid:\", 10) == 0) {\n                int pid = atoi(line + 10);\n                fclose(fp);\n                return pid != 0;\n            }\n        }\n        fclose(fp);\n    }\n    \n    // Method 2: Try to attach ptrace to self\n    if (ptrace(PTRACE_TRACEME, 0, 0, 0) == -1) {\n        return true; // Already being traced\n    }\n    \n    // Method 3: Check for common debugger files\n    struct stat fileStat;\n    if (stat(\"/data/local/tmp/frida-server\", &fileStat) == 0) {\n        return true; // Frida detected\n    }\n    \n    return false;\n}\n\n// Call this periodically from random places in the code\nvoid checkIntegrity() {\n    if (isDebuggerAttached()) {\n        // Don't just crash - that's too obvious\n        // Subtly corrupt the encryption to make debugging harder\n        corruptInternalState();\n    }\n}\n```\n\nI spent weeks researching anti-debugging techniques. Some were clever, others borderline paranoid. My favorite was checking execution timing - debuggers slow down execution, so if a function takes longer than expected, we knew something was wrong:\n\n```cpp\n// Timing-based anti-debug\n#include \u003Cchrono>\n\nbool detectTimingAnomaly() {\n    auto start = std::chrono::high_resolution_clock::now();\n    \n    // Perform a known operation\n    volatile int sum = 0;\n    for (int i = 0; i \u003C 1000000; i++) {\n        sum += i;\n    }\n    \n    auto end = std::chrono::high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast\u003Cstd::chrono::microseconds>(end - start);\n    \n    // On normal execution, this takes ~2000-3000 microseconds\n    // Under debugger, it can take 10x longer\n    return duration.count() > 5000;\n}\n```\n\n## The Key Management Problem\n\nThe biggest challenge wasn't the encryption itself - it was key management. Where do you store the key securely? I tried several approaches:\n\n**Attempt 1: Hardcoded keys (obviously bad)**\n```cpp\nconst char* SECRET_KEY = \"ThisIsNotSecureAtAll123456789012\"; // DON'T DO THIS\n```\n\n**Attempt 2: Obfuscated keys**\n```cpp\n// Split key across multiple variables\nconst char k1[] = {0x54, 0x68, 0x69, 0x73};\nconst char k2[] = {0x49, 0x73, 0x4E, 0x6F};\nconst char k3[] = {0x74, 0x53, 0x65, 0x63};\n// ... reconstruct at runtime\n\nstd::string reconstructKey() {\n    std::string key;\n    key.append(k1, sizeof(k1));\n    key.append(k2, sizeof(k2));\n    key.append(k3, sizeof(k3));\n    // XOR with another value for extra obfuscation\n    for (size_t i = 0; i \u003C key.length(); i++) {\n        key[i] ^= 0x42;\n    }\n    return key;\n}\n```\n\nStill not great - a determined attacker could trace the key reconstruction.\n\n**Attempt 3: Dynamic key generation based on device properties**\n```cpp\nstd::string generateDeviceKey(JNIEnv* env, jobject context) {\n    // Get Android ID\n    jclass settingsClass = env->FindClass(\"android/provider/Settings$Secure\");\n    jmethodID getStringMethod = env->GetStaticMethodID(settingsClass, \"getString\",\n        \"(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;\");\n    \n    // Get ContentResolver\n    jclass contextClass = env->GetObjectClass(context);\n    jmethodID getContentResolverMethod = env->GetMethodID(contextClass, \n        \"getContentResolver\", \"()Landroid/content/ContentResolver;\");\n    jobject contentResolver = env->CallObjectMethod(context, getContentResolverMethod);\n    \n    // Get Android ID\n    jstring androidIdKey = env->NewStringUTF(\"android_id\");\n    jstring androidId = (jstring)env->CallStaticObjectMethod(settingsClass, \n        getStringMethod, contentResolver, androidIdKey);\n    \n    const char* androidIdStr = env->GetStringUTFChars(androidId, nullptr);\n    \n    // Combine with package signature\n    std::string deviceKey = std::string(androidIdStr);\n    deviceKey += getPackageSignature(env, context);\n    \n    // Hash it\n    unsigned char hash[32];\n    SHA256((unsigned char*)deviceKey.c_str(), deviceKey.length(), hash);\n    \n    env->ReleaseStringUTFChars(androidId, androidIdStr);\n    \n    return std::string((char*)hash, 32);\n}\n```\n\nThis was better - the key was unique per device and couldn't be extracted without running the code.\n\n## The Final Architecture\n\nAfter months of iteration, here's what the final architecture looked like:\n\n```cpp\n// secure_core.cpp - The final implementation\nclass SecureCore {\nprivate:\n    std::vector\u003Cuint8_t> sessionKey;\n    bool isInitialized = false;\n    std::thread integrityChecker;\n    \n    // Multiple layers of obfuscation\n    void initializeKeys() {\n        // Layer 1: Device-specific key\n        std::vector\u003Cuint8_t> deviceKey = generateDeviceKey();\n        \n        // Layer 2: Time-based component\n        auto timestamp = std::chrono::system_clock::now().time_since_epoch().count();\n        \n        // Layer 3: Random salt\n        uint8_t salt[16];\n        RAND_bytes(salt, sizeof(salt));\n        \n        // Combine using PBKDF2\n        PKCS5_PBKDF2_HMAC((char*)deviceKey.data(), deviceKey.size(),\n                          salt, sizeof(salt),\n                          10000, // iterations\n                          EVP_sha256(),\n                          32, // key length\n                          sessionKey.data());\n        \n        // Start integrity monitoring\n        integrityChecker = std::thread([this]() {\n            while (isInitialized) {\n                checkIntegrity();\n                std::this_thread::sleep_for(std::chrono::seconds(rand() % 10 + 5));\n            }\n        });\n    }\n    \n    void checkIntegrity() {\n        // Check for debugger\n        if (isDebuggerAttached()) {\n            subtlyCorruptState();\n            return;\n        }\n        \n        // Check for hooks (Frida, Xposed)\n        if (detectHooks()) {\n            subtlyCorruptState();\n            return;\n        }\n        \n        // Verify signature\n        if (!verifyAppSignature()) {\n            subtlyCorruptState();\n            return;\n        }\n        \n        // Check for emulator\n        if (isEmulator()) {\n            // Emulators are OK for testing, just log it\n            logSuspiciousActivity(\"Running on emulator\");\n        }\n    }\n    \n    // Instead of crashing, subtly break functionality\n    void subtlyCorruptState() {\n        // Randomly flip bits in the key\n        if (!sessionKey.empty()) {\n            sessionKey[rand() % sessionKey.size()] ^= (1 \u003C\u003C (rand() % 8));\n        }\n        // Decryption will fail, but not immediately obvious why\n    }\n    \npublic:\n    std::vector\u003Cuint8_t> encrypt(const std::vector\u003Cuint8_t>& data) {\n        if (!isInitialized) {\n            initializeKeys();\n            isInitialized = true;\n        }\n        \n        // Use AES-256-GCM for authenticated encryption\n        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n        EVP_EncryptInit_ex(ctx, EVP_aes_256_gcm(), nullptr, \n                          sessionKey.data(), nullptr);\n        \n        // Generate random IV\n        uint8_t iv[12];\n        RAND_bytes(iv, sizeof(iv));\n        EVP_EncryptInit_ex(ctx, nullptr, nullptr, nullptr, iv);\n        \n        // Encrypt\n        std::vector\u003Cuint8_t> ciphertext(data.size() + 16);\n        int len;\n        EVP_EncryptUpdate(ctx, ciphertext.data(), &len, data.data(), data.size());\n        int ciphertextLen = len;\n        \n        EVP_EncryptFinal_ex(ctx, ciphertext.data() + len, &len);\n        ciphertextLen += len;\n        \n        // Get tag\n        uint8_t tag[16];\n        EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_GET_TAG, 16, tag);\n        \n        EVP_CIPHER_CTX_free(ctx);\n        \n        // Combine IV + ciphertext + tag\n        std::vector\u003Cuint8_t> result;\n        result.insert(result.end(), iv, iv + sizeof(iv));\n        result.insert(result.end(), ciphertext.begin(), \n                     ciphertext.begin() + ciphertextLen);\n        result.insert(result.end(), tag, tag + sizeof(tag));\n        \n        return result;\n    }\n};\n```\n\n## The Integration Challenge\n\nGetting this native library to work seamlessly with our Kotlin codebase was another adventure. JNI is not forgiving - one wrong move and the app crashes with no useful error message.\n\nI created a Kotlin wrapper to make it easy for other developers to use:\n\n```kotlin\n// NativeSecurityWrapper.kt\nclass NativeSecurityWrapper {\n    companion object {\n        init {\n            System.loadLibrary(\"security-native\")\n        }\n        \n        @JvmStatic\n        external fun initializeSecurity(context: Context): Boolean\n        \n        @JvmStatic\n        external fun encryptData(data: ByteArray): ByteArray\n        \n        @JvmStatic\n        external fun decryptData(data: ByteArray): ByteArray\n    }\n    \n    private var initialized = false\n    \n    fun initialize(context: Context) {\n        if (!initialized) {\n            initialized = initializeSecurity(context)\n            if (!initialized) {\n                throw SecurityException(\"Failed to initialize security module\")\n            }\n        }\n    }\n    \n    fun encrypt(data: String): String {\n        val encrypted = encryptData(data.toByteArray())\n        return Base64.encodeToString(encrypted, Base64.NO_WRAP)\n    }\n    \n    fun decrypt(data: String): String {\n        val encrypted = Base64.decode(data, Base64.NO_WRAP)\n        val decrypted = decryptData(encrypted)\n        return String(decrypted)\n    }\n}\n```\n\nThe first time we integrated this into the main app, it crashed immediately. The error? \"java.lang.UnsatisfiedLinkError: Native method not found\". Turns out, C++ name mangling was changing the function names. I had to add `extern \"C\"` to every JNI function.\n\nAnother fun bug: the app worked perfectly on my Pixel phone but crashed on Samsung devices. After two days of debugging, I discovered Samsung's custom Android build handled certain native memory operations differently. The fix was embarrassingly simple - I was releasing a JNI reference twice.\n\n## Performance Impact\n\nI was worried about performance. Native code is faster than Java, but JNI calls have overhead. We ran extensive benchmarks:\n\n```kotlin\n// Benchmark results on Pixel 6\n// Encrypting 1KB of data, 1000 iterations\n\n// Old Java implementation\n// Average: 2.3ms per operation\n// Total: 2,300ms\n\n// New native implementation  \n// Average: 0.8ms per operation\n// Total: 800ms\n\n// 65% performance improvement!\n```\n\nThe native implementation was actually faster! The JNI overhead was negligible compared to the cryptographic operations.\n\n## The Production Rollout\n\nWe couldn't just push this to 2 million users and hope for the best. The rollout was carefully staged:\n\n1. **Internal testing** (2 weeks): Our QA team tried to break it\n2. **Beta program** (1 month): 1,000 volunteers used a special build\n3. **Staged rollout** (2 months): 1% ‚Üí 5% ‚Üí 10% ‚Üí 25% ‚Üí 50% ‚Üí 100%\n\nDuring the beta, we discovered the library crashed on Android 5.0 devices (API level 21). The OpenSSL version we were using wasn't compatible. I had to conditionally compile different versions:\n\n```cpp\n#if __ANDROID_API__ >= 23\n    // Use modern OpenSSL features\n    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n#else\n    // Fallback for older Android\n    EVP_CIPHER_CTX ctx;\n    EVP_CIPHER_CTX_init(&ctx);\n#endif\n```\n\n## The Unexpected Benefits\n\nSix months after deployment, we noticed something interesting in our analytics. App crashes had decreased by 15%. It turned out our anti-tampering code was catching other issues too - corrupted installations, modified system libraries, even some device-specific bugs.\n\nThe security team was happy too. We hadn't had a single successful key extraction attempt since the deployment. Penetration testers told us it would take \"nation-state level resources\" to break our implementation. That might be an exaggeration, but it felt good to hear.\n\n## What I Learned\n\nBuilding this security library taught me more than just NDK and C++. Here are the key lessons:\n\n1. **Security is layers**: No single technique is foolproof. Combine multiple approaches.\n\n2. **Obscurity helps (a little)**: \"Security through obscurity\" is bad as the only defense, but it's a useful additional layer.\n\n3. **Performance matters**: If security makes the app unusable, people will find ways around it.\n\n4. **Test on real devices**: Emulators don't catch device-specific issues.\n\n5. **Plan for failure**: Our subtle corruption approach meant that even if someone bypassed our security, they wouldn't immediately know they succeeded.\n\n## The Code That Didn't Make It\n\nNot everything I tried worked. Here's my favorite failure - an attempt to use the accelerometer to generate entropy:\n\n```cpp\n// Don't do this - it's terrible for UX\nstd::vector\u003Cuint8_t> generateEntropyFromMotion(JNIEnv* env, jobject context) {\n    // Register sensor listener\n    // Wait for user to shake phone\n    // Use accelerometer data as random seed\n    \n    // Users hated this - \"Why do I need to shake my phone to open the app?\"\n    // Removed after one day in beta\n}\n```\n\n## Community Response\n\nWhen I presented this approach at DroidCon Vietnam, the response was mixed. Some developers loved the thoroughness, others thought it was overkill. One comment stuck with me: \"You're not protecting nuclear codes, it's just a banking app.\"\n\nBut that's the thing - for our users, their life savings aren't \"just\" anything. One data breach could destroy lives. Maybe we went overboard, but I sleep better knowing we did everything we could.\n\nA security researcher from Singapore reached out after the talk. He'd tried to crack our implementation as a challenge and gave up after a week. His message: \"Your anti-debugging is annoying as hell. Good job.\" That made my month.\n\n## Open Source Considerations\n\nI wanted to open-source the library, but legal said no - \"security through obscurity\" apparently includes not showing your code to the world. Fair enough. But I did release a simplified version with the anti-tampering techniques removed: [github.com/khoivan/android-native-security](https://github.com/khoivan/android-native-security).\n\nWithin a month, it had 500 stars and developers from around the world were contributing improvements. Someone even ported it to iOS, which was ironic since I barely understand Objective-C.\n\n## What's Next\n\nWe're now working on version 2.0. The plan includes:\n- Rust instead of C++ (memory safety!)\n- Hardware security module integration\n- Biometric-locked keys\n- Post-quantum cryptography (yes, we're thinking that far ahead)\n\nLooking back at that 2 AM wake-up call, I'm grateful it happened. It pushed me out of my comfort zone and into native development. I learned more in those six months than in the previous two years.\n\n## Final Thoughts\n\nIf you're building a security-sensitive Android app, here's my advice:\n\n1. **Start with the basics**: Use Android Keystore, enable ProGuard, certificate pinning\n2. **Go native for sensitive operations**: It's not bulletproof, but it raises the bar significantly\n3. **Add active protections**: Anti-debugging, anti-tampering, integrity checks\n4. **Monitor everything**: Log suspicious behavior (without violating privacy)\n5. **Stay humble**: There's always someone smarter trying to break your security\n\nThe native library now protects millions of transactions every day. It's not perfect - nothing is - but it's good enough that attackers move on to easier targets. In security, that's often the best you can hope for.\n\nSometimes I still wake up at 2 AM, worried that someone found a vulnerability. But then I remember: we've built something solid, we monitor it carefully, and we're ready to respond if needed. That's all you can do.\n\nOh, and that security researcher who called our anti-debugging \"annoying as hell\"? He's now on our security team. Sometimes the best way to beat them is to hire them.\n\n---\n\n*If you're interested in Android native development or have questions about our implementation, reach out on [Twitter](https://twitter.com/khoivan). I can't share all the details (obviously), but I'm happy to discuss the general approaches and lessons learned.*\n\n*And if you manage to crack our security... please do the responsible thing and report it. We have a bug bounty program. Don't be the person who wakes me up at 2 AM again.*","src/content/blog/building-native-security-library-banking.mdx","4083a336fe978c28","mobile-daily-20250817",{"id":309,"data":311,"body":316,"filePath":317,"digest":318,"deferredRender":26},{"title":312,"description":313,"pubDate":314,"author":17,"category":62,"tags":315,"draft":25,"featured":25,"language":27,"readingTime":67,"categorySlug":62},"Mobile Daily {{2025}}/{{08}}/{{17}}","Quick thoughts and learnings from today",["Date","2025-08-16T17:00:00.000Z"],[62,64],"TL;DR (c·∫≠p nh·∫≠t)\n\n\t‚Ä¢\tAndroid Security Bulletin (ASB) 2025-08 ƒë√£ ph√°t h√†nh; patch level 2025-08-05 l√† baseline ƒë·ªÉ ‚Äúƒë·ªß‚Äù to√†n b·ªô l·ªó h·ªïng, trong ƒë√≥ c√≥ RCE ·ªü System.  Ôøº\n\n\t‚Ä¢\tPixel Update Bulletin 2025-08: m·ªçi m√°y Pixel h·ªó tr·ª£ s·∫Ω nh·∫≠n 2025-08-05, c√≥ c·∫£ b·∫£n v√° modem.  Ôøº\n\n\t‚Ä¢\tGoogle Play policy: t·ª´ 2025-08-31, app m·ªõi & c·∫≠p nh·∫≠t ph·∫£i target API 35 (Android 15); c√≥ kho·∫£ng gia h·∫°n ƒë·∫øn 2025-11-01. Wear/Auto/TV v·∫´n API 34.  Ôøº Ôøº\n\n\t‚Ä¢\tChrome/WebView 139: ng·ª´ng h·ªó tr·ª£ Android 8/9, y√™u c·∫ßu Android 10+; WebView d√πng chung engine Chromium v·ªõi Chrome ‚áí thi·∫øt b·ªã 8/9 s·∫Ω ‚Äúƒë√≥ng bƒÉng‚Äù engine.  Ôøº Ôøº Ôøº\n\n\t‚Ä¢\tiOS/iPadOS 18.6 (29/07/2025): nhi·ªÅu m·ª•c WebKit (v√≠ d·ª• CVE-2025-43216/43228/43265/6558) ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp WKWebView trong app.  Ôøº\n\n\t‚Ä¢\tFrida 17.2.15: h·ªó tr·ª£ iOS 26 (dual-mapping, injection tr√™n palera1n), c·∫£i thi·ªán frida-java-bridge ph√≠a Android; c·∫ßn c·∫≠p nh·∫≠t heuristic RASP.  Ôøº\n\n\n\n‚∏ª\n\n\n\nƒêi·ªÉm nh·∫•n (ƒë√£ l√†m r√µ)\n\n\n\n\\[P0] android/security_patch ‚Äî ASB 2025-08\n\n\t‚Ä¢\tT√≥m t·∫Øt k·ªπ thu·∫≠t: Bulletin 8/2025 y√™u c·∫ßu 2025-08-05 ƒë·ªÉ bao ph·ªß t·∫•t c·∫£ v·∫•n ƒë·ªÅ; c√≥ RCE (Critical) ·ªü System ‚Äúzero-click‚Äù khi k·∫øt h·ª£p v·ªõi bug kh√°c.  Ôøº\n\n\t‚Ä¢\t·∫¢nh h∆∞·ªüng t·ªõi banking:\n\n\t‚Ä¢\tB·ªÅ m·∫∑t web/media/system c√≥ th·ªÉ d·∫´n t·ªõi crash ho·∫∑c RCE ‚Üí t√°c ƒë·ªông ƒëƒÉng nh·∫≠p, OTP, giao d·ªãch, KYC camera, v√† in-app web.\n\n\t‚Ä¢\tT√πy SoC c√≤n c√≥ Arm/Qualcomm/closed-source ·ªü nh√°nh 08-05.  Ôøº\n\n\t‚Ä¢\tH√†nh ƒë·ªông:\n\n\t1.\tBaseline QA ‚â• 2025-08-05 tr√™n ma tr·∫≠n thi·∫øt b·ªã.\n\n\t2.\tSmoke: ƒëƒÉng nh·∫≠p ‚Üí OTP ‚Üí giao d·ªãch; KYC camera; t·∫•t c·∫£ m√†n c√≥ WebView.\n\n\t3.\tTheo d√µi crash/ANR theo OS/WebView version; c·∫£nh b√°o spike b·∫•t th∆∞·ªùng.\n\n\n\n\\[P1] android/store_policy ‚Äî Target API 35 t·ª´ 31/08/2025\n\n\t‚Ä¢\tQuy ƒë·ªãnh: M·ªçi b·∫£n c·∫≠p nh·∫≠t & app m·ªõi ph·∫£i target 35; Wear/Auto/TV 34. C√≥ ƒë∆°n xin gia h·∫°n ƒë·∫øn 01/11/2025.  Ôøº Ôøº\n\n\t‚Ä¢\t·∫¢nh h∆∞·ªüng:\n\n\t‚Ä¢\tC·∫ßn r√† so√°t scope quy·ªÅn (Health/Body Sensor, notification, media permissions, background).\n\n\t‚Ä¢\tApp ƒëang target 34 v·∫´n ph√¢n ph·ªëi ƒë∆∞·ª£c, nh∆∞ng update ti·∫øp theo ph·∫£i n√¢ng 35.\n\n\t‚Ä¢\tH√†nh ƒë·ªông:\n\n\t‚Ä¢\tN√¢ng targetSdkVersion=35; c·∫≠p nh·∫≠t AGP/Gradle; ch·∫°y SDK Upgrade Assistant.\n\n\t‚Ä¢\tThi·∫øt l·∫≠p regression matrix API 29 ‚Üí 35 (ƒë·∫∑c bi·ªát: scoped storage/foreground service/notifications).\n\n\n\n\\[P1] ios/security_patch ‚Äî iOS/iPadOS 18.6\n\n\t‚Ä¢\tT√≥m t·∫Øt: Ph√°t h√†nh 29/07/2025; c√≥ nhi·ªÅu m·ª•c WebKit li√™n quan ƒëi·ªÅu khi·ªÉn thanh ƒë·ªãa ch·ªâ, OOB read, UAF crash (v√≠ d·ª• CVE-2025-43228/43265/43216/6558).  Ôøº\n\n\t‚Ä¢\t·∫¢nh h∆∞·ªüng t·ªõi banking: r·ªßi ro SSO/3DS/statement viewer/deep link ch·∫°y trong WKWebView.\n\n\t‚Ä¢\tH√†nh ƒë·ªông:\n\n\t1.\tBaseline QA iOS/iPadOS 18.6; regression h√†nh vi AutoFill OTP & 3DS.\n\n\t2.\tKi·ªÉm tra ATS/pinning v√† UI anti-spoofing sau khi engine WebKit thay ƒë·ªïi.\n\n\t3.\tTheo d√µi RSR v√† ƒë·ªëi chi·∫øu WebKitGTK/WPE ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng ph·∫°m vi cross-platform.  Ôøº\n\n\n\n\\[P2] android/sdk_tooling ‚Äî Chrome/WebView 139 ng·ª´ng Android 8/9\n\n\t‚Ä¢\tThay ƒë·ªïi: Chrome 138 l√† b·∫£n cu·ªëi cho Android 8/9; Chrome 139 (5/8/2025) y√™u c·∫ßu Android 10+. V√¨ WebView d√πng chung engine v·ªõi Chrome, thi·∫øt b·ªã 8/9 ng∆∞ng nh·∫≠n c·∫≠p nh·∫≠t engine.  Ôøº Ôøº Ôøº\n\n\t‚Ä¢\t·∫¢nh h∆∞·ªüng: kh√°c bi·ªát rendering/JS, r·ªßi ro CVE web; ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp 3DS, statement viewer, OAuth/SSO in-app.\n\n\t‚Ä¢\tH√†nh ƒë·ªông:\n\n\t‚Ä¢\tN√¢ng y√™u c·∫ßu Android 10+ cho lu·ªìng web nh·∫°y c·∫£m.\n\n\t‚Ä¢\tThi·∫øt l·∫≠p guardrail (v√≠ d·ª•: read-only, c·∫•m thanh to√°n) n·∫øu WebView qu√° c≈©; hi·ªÉn th·ªã banner n√¢ng OS.\n\n\t‚Ä¢\tQuan s√°t t·ªâ l·ªá 8/9 v√† l√™n l·ªô tr√¨nh khuy·∫øn kh√≠ch n√¢ng c·∫•p thi·∫øt b·ªã.\n\n\n\n\\[P2] cross-platform/security_patch ‚Äî WebKitGTK/WPE WSA-2025-0005\n\n\t‚Ä¢\t√ù nghƒ©a: advisory t·ªïng h·ª£p c√°c CVE WebKit t∆∞∆°ng ƒë·ªìng v·ªõi iOS 18.6 (v√≠ d·ª• CVE-2025-43228/43265/6558), ti·ªán ƒë·ªÉ map ph·∫°m vi tr√™n Linux/embedded & so v·ªõi WKWebView.  Ôøº\n\n\n\n\\[P2] root_jailbreak/hook_tamper ‚Äî Frida 17.2.15\n\n\t‚Ä¢\tThay ƒë·ªïi ch√≠nh: h·ªó tr·ª£ iOS 26 (dual-mapping, injection tr√™n palera1n); Android bump frida-java-bridge v·ªõi c·∫£i thi·ªán lookup offset tr√™n ART; th√™m visionOS; c√°c ch·ªânh s·ª≠a register/NativeFunction.  Ôøº\n\n\t‚Ä¢\tT√°c ƒë·ªông RASP: fingerprint ‚Äúc≈©‚Äù theo process/lib/pipe/port c√≥ th·ªÉ b·ªè l·ªçt; c·∫ßn heuristic d·ª±a v√†o h√†nh vi (IPC, injection) v√† ƒëi·ªÉm ki·ªÉm so√°t giao d·ªãch.\n\n\n\n‚∏ª\n\n\n\nAndroid (chi ti·∫øt tri·ªÉn khai)\n\n\n\nAndroid Security Bulletin ‚Äî August 2025\n\n\n\nR·ªßi ro: RCE ·ªü System (Critical) + EoP trong Framework, v√† vendor patches (Arm/Qualcomm/closed-source) ·ªü m·ª©c 08-05. Patch level 2025-08-05 bao ph·ªß to√†n b·ªô.  Ôøº\n\n\n\nChecklist QA\n\n\t‚Ä¢\tThi·∫øt b·ªã test: t·ªëi thi·ªÉu Pixel (patch 08-05) + 1‚Äì2 OEM ph·ªï bi·∫øn.  Ôøº\n\n\t‚Ä¢\tK·ªãch b·∫£n smoke:\n\n\t‚Ä¢\tƒêƒÉng nh·∫≠p ‚Üí OTP (SMS/Call/Email) ‚Üí giao d·ªãch.\n\n\t‚Ä¢\tKYC camera (permission/capture/encode/upload).\n\n\t‚Ä¢\tIn-app web: 3DS, statement/PDF, OAuth/SSO.\n\n\t‚Ä¢\tTheo d√µi sau ph√°t h√†nh: crash/ANR theo OS patch & WebView version.\n\n\n\nPixel Update Bulletin ‚Äî August 2025\n\n\n\nL∆∞u √Ω modem/telephony: c√≥ RCE High ·ªü modem (CVE-2025-26784) trong m·ª•c Pixel; y√™u c·∫ßu 08-05 cho m·ªçi m√°y ƒë∆∞·ª£c h·ªó tr·ª£. Ki·ªÉm tra SMS OTP/voice call v√† push sau update.  Ôøº\n\n\n\n‚∏ª\n\n\n\nGoogle Play Policy ‚Äî Target API 35 (t·ª´ 31/08/2025)\n\n\n\nY√™u c·∫ßu: app m·ªõi & c·∫≠p nh·∫≠t ph·∫£i target API 35; Wear/Auto/TV target 34; c√≥ extension ƒë·∫øn 01/11/2025.  Ôøº Ôøº\n\n\n\nChecklist k·ªπ thu·∫≠t\n\n\t‚Ä¢\tcompileSdk=35, targetSdk=35, AGP ‚â• phi√™n b·∫£n t∆∞∆°ng th√≠ch.\n\n\t‚Ä¢\tCh·∫°y SDK Upgrade Assistant; ph·ªß regression API 29‚Üí35 (storage/notifications/bg-service).\n\n\t‚Ä¢\tR√† so√°t disclosure cho c√°c quy·ªÅn nh·∫°y c·∫£m (Health/Body Sensor‚Ä¶).\n\n\n\n‚∏ª\n\n\n\nChrome/WebView 139 ‚Äî k·∫øt th√∫c h·ªó tr·ª£ Android 8/9\n\n\n\nThay ƒë·ªïi n·ªÅn t·∫£ng: Chrome 139 y√™u c·∫ßu Android 10+; 138 l√† b·∫£n cu·ªëi cho Android 8/9. V√¨ WebView share engine v·ªõi Chrome, thi·∫øt b·ªã 8/9 s·∫Ω kh√¥ng c√≤n c·∫≠p nh·∫≠t engine (g·ªìm v√° b·∫£o m·∫≠t & thay ƒë·ªïi rendering).  Ôøº Ôøº Ôøº\n\n\n\nH√†nh ƒë·ªông ƒë·ªÅ xu·∫•t\n\n\t‚Ä¢\tTest matrix: y√™u c·∫ßu Android 10+ cho m·ªçi lu·ªìng web nh·∫°y c·∫£m (3DS/SSO/statement).\n\n\t‚Ä¢\tGuardrails khi WebView qu√° c≈©:\n\n\t‚Ä¢\tSoft block thanh to√°n / b·∫Øt bu·ªôc m·ªü Chrome Custom Tabs n·∫øu kh·∫£ d·ª•ng.\n\n\t‚Ä¢\tBanner khuy·∫øn ngh·ªã n√¢ng OS.\n\n\t‚Ä¢\tTheo d√µi: t·ª∑ l·ªá ng∆∞·ªùi d√πng 8/9 theo release channel; l·ªô tr√¨nh khuy·∫øn kh√≠ch upgrade.\n\n\n\n‚∏ª\n\n\n\niOS / iPadOS 18.6 ‚Äî Security Content\n\n\n\nNg√†y ph√°t h√†nh: 29/07/2025.\n\nWebKit: nhi·ªÅu m·ª•c li√™n quan address bar spoofing, OOB read, crash (UAF); v√≠ d·ª• CVE-2025-43228/43265/43216/6558. ·∫¢nh h∆∞·ªüng tr·ª±c ti·∫øp WKWebView (SSO/3DS/viewer).  Ôøº\n\n\n\nChecklist QA\n\n\t‚Ä¢\tBaseline iOS/iPadOS 18.6 cho thi·∫øt b·ªã test.\n\n\t‚Ä¢\tRegression: login, OTP AutoFill, 3DS, statement/PDF, deep link.\n\n\t‚Ä¢\tKi·ªÉm tra ATS/pinning v√† UI anti-spoofing khi WebKit ƒë·ªïi.\n\n\t‚Ä¢\tTheo d√µi RSR & ƒë·ªëi chi·∫øu v·ªõi WebKitGTK/WPE WSA-2025-0005.  Ôøº\n\n\n\n‚∏ª\n\n\n\nRoot / Jailbreak / Hook ‚Äî Frida 17.2.15\n\n\n\nThay ƒë·ªïi ƒë√°ng ch√∫ √Ω:\n\n\t‚Ä¢\tiOS 26: h·ªó tr·ª£ th√¥ng qua dual-mapping, cho ph√©p injection (palera1n).\n\n\t‚Ä¢\tAndroid: n√¢ng frida-java-bridge (c·∫£i thi·ªán lookup offset tr√™n ART).\n\n\t‚Ä¢\tKh√°c: visionOS, NEON registers ARM/arm64, c·∫≠p nh·∫≠t NativeFunction.  Ôøº\n\n\n\nKhuy·∫øn ngh·ªã RASP\n\n\t‚Ä¢\tB·ªï sung ph√°t hi·ªán process injection / code-sign anomalies / IPC b·∫•t th∆∞·ªùng thay v√¨ ch·ªâ d·ª±a t√™n lib/process/pipe.\n\n\t‚Ä¢\tCh√®n attestation (Play Integrity / App Attest) t·∫°i m√†n nh·∫°y c·∫£m & tr∆∞·ªõc giao d·ªãch.\n\n\t‚Ä¢\tThu th·∫≠p telemetry ·∫©n danh ƒë·ªÉ theo d√µi t·ªâ l·ªá nghi v·∫•n hook/root.\n\n\n\n‚∏ª\n\n\n\nChecklist h√†nh ƒë·ªông\n\n\n\nAct now\n\n\t‚Ä¢\tC·∫≠p nh·∫≠t thi·∫øt b·ªã QA: Android 2025-08-05, iOS/iPadOS 18.6.  Ôøº Ôøº\n\n\t‚Ä¢\tSmoke/regression: login, OTP, giao d·ªãch, WebView/WKWebView, camera KYC.\n\n\t‚Ä¢\tB·∫≠t fallback & c·∫£nh b√°o: Integrity/Biometric kh√¥ng ƒë·∫°t ho·∫∑c WebView qu√° c≈© (Android 8/9).  Ôøº\n\n\n\nPlan\n\n\t‚Ä¢\tN√¢ng targetSdkVersion=35; chu·∫©n ho√° CI/CD.  Ôøº\n\n\t‚Ä¢\tR√† so√°t disclosure quy·ªÅn (Health/Body Sensor), c·∫≠p nh·∫≠t privacy notes tr√™n store.\n\n\t‚Ä¢\tChu·∫©n ho√° device floor: Android 10+ cho lu·ªìng web nh·∫°y c·∫£m.\n\n\t‚Ä¢\tB·ªï sung k·ªãch b·∫£n chaos/regression: 3DS, statement viewer, OAuth/SSO tr√™n c·∫£ WebView/WKWebView.\n\n\n\nMonitor\n\n\t‚Ä¢\tTheo d√µi Pixel Update Bulletin & advisory WebKit/Chromium ti·∫øp theo.  Ôøº\n\n\t‚Ä¢\tCrash/ANR theo OS/WebView; b√°o c√°o xu h∆∞·ªõng tu·∫ßn.\n\n\t‚Ä¢\tC·∫≠p nh·∫≠t rule ph√°t hi·ªán hook cho Frida 17.2.x; ki·ªÉm th·ª≠ bypass ph·ªï bi·∫øn.  Ôøº\n\n\t‚Ä¢\tQuan s√°t t·ª∑ l·ªá Android 8/9; l·ªô tr√¨nh th√∫c ƒë·∫©y n√¢ng c·∫•p thi·∫øt b·ªã.  Ôøº\n\n\n\n‚∏ª\n\n\n\nNgu·ªìn tham kh·∫£o\n\n\t‚Ä¢\tAndroid Security Bulletin ‚Äî August 2025 (patch 08-05, RCE System).  Ôøº\n\n\t‚Ä¢\tPixel Update Bulletin ‚Äî August 2025 (m·ªçi Pixel h·ªó tr·ª£ l√™n 08-05; modem).  Ôøº\n\n\t‚Ä¢\tTarget API requirement (API 35 t·ª´ 31/08/2025, extension ƒë·∫øn 01/11/2025).  Ôøº Ôøº\n\n\t‚Ä¢\tChrome 139 d·ª´ng Android 8/9; Chrome 138 l√† b·∫£n cu·ªëi; WebView share engine v·ªõi Chrome.  Ôøº Ôøº Ôøº\n\n\t‚Ä¢\tiOS/iPadOS 18.6 (29/07/2025) ‚Äî danh m·ª•c CVE, nhi·ªÅu m·ª•c WebKit.  Ôøº\n\n\t‚Ä¢\tWebKitGTK/WPE WSA-2025-0005 ‚Äî mapping CVE v·ªõi iOS 18.6.  Ôøº\n\n\t‚Ä¢\tFrida 17.2.15 Release ‚Äî iOS 26 & c·∫£i thi·ªán Android bridge.  Ôøº","src/content/blog/mobile-daily-20250817.mdx","71f878f8bd1d4f58"]