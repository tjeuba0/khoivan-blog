---
export interface Props {
  post: {
    id: string
    data: {
      title: string
      description: string
      pubDate: Date
      category: string
      tags: string[]
    }
  }
}

const { post } = Astro.props
const url = `/blog/${post.id}`

// Format date for display
const formattedDate = post.data.pubDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
})
---

<article class="mb-8 pb-8 border-b last:border-0" style="border-color: rgba(var(--color-border), 0.2);">
  <h2 class="mb-2">
    <a href={url} class="text-2xl md:text-[1.75rem] font-semibold leading-tight inline-block
                         no-underline hover:opacity-80
                         transition-all duration-200">
      {post.data.title}
    </a>
  </h2>
  
  <div class="flex items-center gap-4 text-sm opacity-75 mb-3">
    <div class="flex items-center gap-1.5">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <time datetime={post.data.pubDate.toISOString()}>
        {formattedDate}
      </time>
    </div>
    {post.data.tags && post.data.tags.length > 0 && (
      <div class="flex gap-2">
        {post.data.tags.slice(0, 3).map((tag) => (
          <a href={`/blog/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`} 
             class="inline-block px-2 py-1 rounded text-xs tag no-underline hover:opacity-80">
            {tag}
          </a>
        ))}
      </div>
    )}
  </div>
  
  <p class="leading-relaxed opacity-90">
    {post.data.description}
  </p>
</article>