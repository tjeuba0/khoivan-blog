---
export interface Props {
  post: {
    id: string
    data: {
      title: string
      description: string
      pubDate: Date
      category: string
      tags: string[]
      featured: boolean
      readingTime: string
    }
  }
}

const { post } = Astro.props
const url = `/blog/${post.id}`

// Format date for display
const formattedDate = post.data.pubDate.toLocaleDateString('vi-VN', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
})
---

<article
  class="group relative flex flex-col overflow-hidden rounded-2xl bg-white shadow-sm transition-all hover:shadow-xl"
>
  {
    post.data.featured && (
      <span class="absolute top-4 right-4 z-10 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 px-3 py-1 text-xs font-semibold text-white">
        Featured
      </span>
    )
  }

  <a href={url} class="flex flex-1 flex-col p-6">
    <div class="flex items-center gap-2 text-sm text-gray-500">
      <span class="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700">
        {post.data.category}
      </span>
      <span>â€¢</span>
      <time datetime={post.data.pubDate.toISOString()}>
        {formattedDate}
      </time>
    </div>

    <h3 class="mt-4 text-xl font-bold text-gray-900 transition-colors group-hover:text-blue-600">
      {post.data.title}
    </h3>

    <p class="mt-2 line-clamp-3 flex-1 text-gray-600">
      {post.data.description}
    </p>

    <div class="mt-4 flex items-center justify-between">
      <div class="flex flex-wrap gap-2">
        {post.data.tags.slice(0, 3).map((tag) => <span class="text-xs text-gray-500">#{tag}</span>)}
      </div>
      <span class="text-sm text-gray-500">{post.data.readingTime}</span>
    </div>
  </a>
</article>
